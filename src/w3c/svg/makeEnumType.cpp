
// generated by genAttributeParser.py

#include <w3c/svg/makeEnumType.hpp>
#include <iostream>

namespace svgl {
using namespace svg;

svg::SVGFETurbulenceElement::SVG_STITCHTYPE
make_SVGFETurbulenceElement_SVG_STITCHTYPE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::noStitch_attribute_string) { // default value
      return SVGFETurbulenceElement::SVG_STITCHTYPE_NOSTITCH;
   } else

   if (*s==*svg::stitch_attribute_string) {
      return SVGFETurbulenceElement::SVG_STITCHTYPE_STITCH;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFETurbulenceElement::SVG_STITCHTYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFETurbulenceElement::SVG_STITCHTYPE_UNKNOWN;
   }
}

svg::SVGFETurbulenceElement::SVG_TURBULENCE_TYPE
make_SVGFETurbulenceElement_SVG_TURBULENCE_TYPE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::turbulence_attribute_string) { // default value
      return SVGFETurbulenceElement::SVG_TURBULENCE_TYPE_TURBULENCE;
   } else

   if (*s==*svg::fractalNoise_attribute_string) {
      return SVGFETurbulenceElement::SVG_TURBULENCE_TYPE_FRACTALNOISE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFETurbulenceElement::SVG_TURBULENCE_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFETurbulenceElement::SVG_TURBULENCE_TYPE_UNKNOWN;
   }
}

svg::SVGURIReference::SVG_XLINK_TYPE
make_SVGURIReference_SVG_XLINK_TYPE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::simple_attribute_string) { // default value
      return SVGURIReference::SVG_XLINK_TYPE_SIMPLE;
   } else

   if (*s==*svg::extended_attribute_string) {
      return SVGURIReference::SVG_XLINK_TYPE_EXTENDED;
   } else

   if (*s==*svg::locator_attribute_string) {
      return SVGURIReference::SVG_XLINK_TYPE_LOCATOR;
   } else

   if (*s==*svg::arc_attribute_string) {
      return SVGURIReference::SVG_XLINK_TYPE_ARC;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGURIReference::SVG_XLINK_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGURIReference::SVG_XLINK_TYPE_UNKNOWN;
   }
}

svg::SVGURIReference::SVG_XLINK_SHOW
make_SVGURIReference_SVG_XLINK_SHOW(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::embed_attribute_string) { // default value
      return SVGURIReference::SVG_XLINK_SHOW_EMBED;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGURIReference::SVG_XLINK_SHOW (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGURIReference::SVG_XLINK_SHOW_UNKNOWN;
   }
}

svg::SVGURIReference::SVG_XLINK_ACTUATE
make_SVGURIReference_SVG_XLINK_ACTUATE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::onLoad_attribute_string) { // default value
      return SVGURIReference::SVG_XLINK_ACTUATE_ONLOAD;
   } else

   if (*s==*svg::onRequest_attribute_string) {
      return SVGURIReference::SVG_XLINK_ACTUATE_ONREQUEST;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGURIReference::SVG_XLINK_ACTUATE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGURIReference::SVG_XLINK_ACTUATE_UNKNOWN;
   }
}

svg::SVGLangSpace::SVG_XML_SPACE
make_SVGLangSpace_SVG_XML_SPACE(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGLangSpace::SVG_XML_SPACE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGLangSpace::SVG_XML_SPACE_UNKNOWN;
   } else

   if (*s==*svg::default_attribute_string) {
      return SVGLangSpace::SVG_XML_SPACE_DEFAULT;
   } else

   if (*s==*svg::preserve_attribute_string) {
      return SVGLangSpace::SVG_XML_SPACE_PRESERVE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGLangSpace::SVG_XML_SPACE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGLangSpace::SVG_XML_SPACE_UNKNOWN;
   }
}

svg::SVGTextContentElement::LENGTHADJUST
make_SVGTextContentElement_LENGTHADJUST(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGTextContentElement::LENGTHADJUST (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGTextContentElement::LENGTHADJUST_UNKNOWN;
   } else

   if (*s==*svg::spacing_attribute_string) {
      return SVGTextContentElement::LENGTHADJUST_SPACING;
   } else

   if (*s==*svg::spacingAndGlyphs_attribute_string) {
      return SVGTextContentElement::LENGTHADJUST_SPACINGANDGLYPHS;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGTextContentElement::LENGTHADJUST (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGTextContentElement::LENGTHADJUST_UNKNOWN;
   }
}

svg::SVGTextPathElement::TEXTPATH_METHODTYPE
make_SVGTextPathElement_TEXTPATH_METHODTYPE(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGTextPathElement::TEXTPATH_METHODTYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGTextPathElement::TEXTPATH_METHODTYPE_UNKNOWN;
   } else

   if (*s==*svg::align_attribute_string) {
      return SVGTextPathElement::TEXTPATH_METHODTYPE_ALIGN;
   } else

   if (*s==*svg::stretch_attribute_string) {
      return SVGTextPathElement::TEXTPATH_METHODTYPE_STRETCH;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGTextPathElement::TEXTPATH_METHODTYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGTextPathElement::TEXTPATH_METHODTYPE_UNKNOWN;
   }
}

svg::SVGTextPathElement::TEXTPATH_SPACINGTYPE
make_SVGTextPathElement_TEXTPATH_SPACINGTYPE(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGTextPathElement::TEXTPATH_SPACINGTYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGTextPathElement::TEXTPATH_SPACINGTYPE_UNKNOWN;
   } else

   if (*s==*svg::auto_attribute_string) {
      return SVGTextPathElement::TEXTPATH_SPACINGTYPE_AUTO;
   } else

   if (*s==*svg::exact_attribute_string) {
      return SVGTextPathElement::TEXTPATH_SPACINGTYPE_EXACT;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGTextPathElement::TEXTPATH_SPACINGTYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGTextPathElement::TEXTPATH_SPACINGTYPE_UNKNOWN;
   }
}

svg::SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE
make_SVGAnimationElement_SVG_ANIMATION_ATTRIBUTE_TYPE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::auto_attribute_string) { // default value
      return SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_AUTO;
   } else

   if (*s==*svg::CSS_attribute_string) {
      return SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_CSS;
   } else

   if (*s==*svg::XML_attribute_string) {
      return SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_XML;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_UNKNOWN;
   }
}

svg::SVGAnimationElement::SVG_ANIMATION_RESTART
make_SVGAnimationElement_SVG_ANIMATION_RESTART(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::always_attribute_string) { // default value
      return SVGAnimationElement::SVG_ANIMATION_RESTART_ALWAYS;
   } else

   if (*s==*svg::never_attribute_string) {
      return SVGAnimationElement::SVG_ANIMATION_RESTART_NEVER;
   } else

   if (*s==*svg::whenNotActive_attribute_string) {
      return SVGAnimationElement::SVG_ANIMATION_RESTART_WHENNOTACTIVE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGAnimationElement::SVG_ANIMATION_RESTART (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGAnimationElement::SVG_ANIMATION_RESTART_UNKNOWN;
   }
}

svg::SVGAnimationElement::SVG_ANIMATION_FILL
make_SVGAnimationElement_SVG_ANIMATION_FILL(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::remove_attribute_string) { // default value
      return SVGAnimationElement::SVG_ANIMATION_FILL_REMOVE;
   } else

   if (*s==*svg::freeze_attribute_string) {
      return SVGAnimationElement::SVG_ANIMATION_FILL_FREEZE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGAnimationElement::SVG_ANIMATION_FILL (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGAnimationElement::SVG_ANIMATION_FILL_UNKNOWN;
   }
}

svg::SVGMarkerElement::SVG_MARKERUNITS
make_SVGMarkerElement_SVG_MARKERUNITS(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGMarkerElement::SVG_MARKERUNITS (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGMarkerElement::SVG_MARKERUNITS_UNKNOWN;
   } else

   if (*s==*svg::strokeWidth_attribute_string) {
      return SVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH;
   } else

   if (*s==*svg::userSpaceOnUse_attribute_string) {
      return SVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGMarkerElement::SVG_MARKERUNITS (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGMarkerElement::SVG_MARKERUNITS_UNKNOWN;
   }
}

svg::SVGRenderingIntent::RENDERING_INTENT
make_SVGRenderingIntent_RENDERING_INTENT(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::auto_attribute_string) { // default value
      return SVGRenderingIntent::RENDERING_INTENT_AUTO;
   } else

   if (*s==*svg::perceptual_attribute_string) {
      return SVGRenderingIntent::RENDERING_INTENT_PERCEPTUAL;
   } else

   if (*s==*svg::relative_colorimetric_attribute_string) {
      return SVGRenderingIntent::RENDERING_INTENT_RELATIVE_COLORIMETRIC;
   } else

   if (*s==*svg::saturation_attribute_string) {
      return SVGRenderingIntent::RENDERING_INTENT_SATURATION;
   } else

   if (*s==*svg::absolute_colorimetric_attribute_string) {
      return SVGRenderingIntent::RENDERING_INTENT_ABSOLUTE_COLORIMETRIC;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGRenderingIntent::RENDERING_INTENT (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGRenderingIntent::RENDERING_INTENT_UNKNOWN;
   }
}

svg::SVGFEBlendElement::SVG_FEBLEND_MODE
make_SVGFEBlendElement_SVG_FEBLEND_MODE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::normal_attribute_string) { // default value
      return SVGFEBlendElement::SVG_FEBLEND_MODE_NORMAL;
   } else

   if (*s==*svg::multiply_attribute_string) {
      return SVGFEBlendElement::SVG_FEBLEND_MODE_MULTIPLY;
   } else

   if (*s==*svg::screen_attribute_string) {
      return SVGFEBlendElement::SVG_FEBLEND_MODE_SCREEN;
   } else

   if (*s==*svg::darken_attribute_string) {
      return SVGFEBlendElement::SVG_FEBLEND_MODE_DARKEN;
   } else

   if (*s==*svg::lighten_attribute_string) {
      return SVGFEBlendElement::SVG_FEBLEND_MODE_LIGHTEN;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFEBlendElement::SVG_FEBLEND_MODE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFEBlendElement::SVG_FEBLEND_MODE_UNKNOWN;
   }
}

svg::SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE
make_SVGFEColorMatrixElement_SVG_FECOLORMATRIX_TYPE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::matrix_attribute_string) { // default value
      return SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_MATRIX;
   } else

   if (*s==*svg::saturate_attribute_string) {
      return SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_SATURATE;
   } else

   if (*s==*svg::hueRotate_attribute_string) {
      return SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_HUEROTATE;
   } else

   if (*s==*svg::luminanceToAlpha_attribute_string) {
      return SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_UNKNOWN;
   }
}

svg::SVGUnitTypes::SVG_UNIT_TYPE
make_SVGUnitTypes_SVG_UNIT_TYPE(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGUnitTypes::SVG_UNIT_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGUnitTypes::SVG_UNIT_TYPE_UNKNOWN;
   } else

   if (*s==*svg::userSpaceOnUse_attribute_string) {
      return SVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE;
   } else

   if (*s==*svg::objectBoundingBox_attribute_string) {
      return SVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGUnitTypes::SVG_UNIT_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGUnitTypes::SVG_UNIT_TYPE_UNKNOWN;
   }
}

svg::SVGGradientElement::SVG_SPREADMETHOD
make_SVGGradientElement_SVG_SPREADMETHOD(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGGradientElement::SVG_SPREADMETHOD (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGGradientElement::SVG_SPREADMETHOD_UNKNOWN;
   } else

   if (*s==*svg::pad_attribute_string) {
      return SVGGradientElement::SVG_SPREADMETHOD_PAD;
   } else

   if (*s==*svg::reflect_attribute_string) {
      return SVGGradientElement::SVG_SPREADMETHOD_REFLECT;
   } else

   if (*s==*svg::repeat_attribute_string) {
      return SVGGradientElement::SVG_SPREADMETHOD_REPEAT;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGGradientElement::SVG_SPREADMETHOD (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGGradientElement::SVG_SPREADMETHOD_UNKNOWN;
   }
}

svg::SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE
make_SVGComponentTransferFunctionElement_SVG_FECOMPONENTTRANSFER_TYPE(const svg::String& s)
{

   if(!s || !s->getLength()) {
      std::cerr << "unknown enum ";
      if(s)
         std::cerr << "\"" << s << "\"";
      std::cerr << " for SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
   } else

   if (*s==*svg::identity_attribute_string) {
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY;
   } else

   if (*s==*svg::table_attribute_string) {
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_TABLE;
   } else

   if (*s==*svg::discrete_attribute_string) {
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE;
   } else

   if (*s==*svg::linear_attribute_string) {
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_LINEAR;
   } else

   if (*s==*svg::gamma_attribute_string) {
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_GAMMA;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
   }
}

svg::SVGFEConvolveMatrixElement::SVG_EDGEMODE
make_SVGFEConvolveMatrixElement_SVG_EDGEMODE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::duplicate_attribute_string) { // default value
      return SVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE;
   } else

   if (*s==*svg::wrap_attribute_string) {
      return SVGFEConvolveMatrixElement::SVG_EDGEMODE_WRAP;
   } else

   if (*s==*svg::none_attribute_string) {
      return SVGFEConvolveMatrixElement::SVG_EDGEMODE_NONE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFEConvolveMatrixElement::SVG_EDGEMODE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFEConvolveMatrixElement::SVG_EDGEMODE_UNKNOWN;
   }
}

svg::SVGFEDisplacementMapElement::SVG_CHANNEL
make_SVGFEDisplacementMapElement_SVG_CHANNEL(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::A_attribute_string) { // default value
      return SVGFEDisplacementMapElement::SVG_CHANNEL_A;
   } else

   if (*s==*svg::R_attribute_string) {
      return SVGFEDisplacementMapElement::SVG_CHANNEL_R;
   } else

   if (*s==*svg::G_attribute_string) {
      return SVGFEDisplacementMapElement::SVG_CHANNEL_G;
   } else

   if (*s==*svg::B_attribute_string) {
      return SVGFEDisplacementMapElement::SVG_CHANNEL_B;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFEDisplacementMapElement::SVG_CHANNEL (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFEDisplacementMapElement::SVG_CHANNEL_UNKNOWN;
   }
}

svg::SVGAElement::SVG_XLINK_SHOW
make_SVGAElement_SVG_XLINK_SHOW(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::replace_attribute_string) { // default value
      return SVGAElement::SVG_XLINK_SHOW_REPLACE;
   } else

   if (*s==*svg::new_attribute_string) {
      return SVGAElement::SVG_XLINK_SHOW_NEW;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGAElement::SVG_XLINK_SHOW (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGAElement::SVG_XLINK_SHOW_UNKNOWN;
   }
}

svg::SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR
make_SVGFECompositeElement_SVG_FECOMPOSITE_OPERATOR(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::over_attribute_string) { // default value
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_OVER;
   } else

   if (*s==*svg::in_attribute_string) {
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_IN;
   } else

   if (*s==*svg::out_attribute_string) {
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_OUT;
   } else

   if (*s==*svg::atop_attribute_string) {
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_ATOP;
   } else

   if (*s==*svg::xor_attribute_string) {
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_XOR;
   } else

   if (*s==*svg::arithmetic_attribute_string) {
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_ARITHMETIC;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_UNKNOWN;
   }
}

svg::SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR
make_SVGFEMorphologyElement_SVG_MORPHOLOGY_OPERATOR(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::erode_attribute_string) { // default value
      return SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR_ERODE;
   } else

   if (*s==*svg::dilate_attribute_string) {
      return SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR_DILATE;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR_UNKNOWN;
   }
}

svg::SVGZoomAndPan::SVG_ZOOMANDPAN
make_SVGZoomAndPan_SVG_ZOOMANDPAN(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::magnify_attribute_string) { // default value
      return SVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY;
   } else

   if (*s==*svg::disable_attribute_string) {
      return SVGZoomAndPan::SVG_ZOOMANDPAN_DISABLE;
   } else

   if (*s==*svg::zoom_attribute_string) {
      return SVGZoomAndPan::SVG_ZOOMANDPAN_ZOOM;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGZoomAndPan::SVG_ZOOMANDPAN (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGZoomAndPan::SVG_ZOOMANDPAN_UNKNOWN;
   }
}

svg::SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE
make_SVGAnimateTransformElement_SVG_ANIMATETRANSFORM_TYPE(const svg::String& s)
{

   if (!s || !s->getLength() || *s==*svg::translate_attribute_string) { // default value
      return SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_TRANSLATE;
   } else

   if (*s==*svg::scale_attribute_string) {
      return SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_SCALE;
   } else

   if (*s==*svg::rotate_attribute_string) {
      return SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_ROTATE;
   } else

   if (*s==*svg::skewX_attribute_string) {
      return SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_SKEWX;
   } else

   if (*s==*svg::skewY_attribute_string) {
      return SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_SKEWY;
   } else

   {
      std::cerr << "unknown enum " << s << " for SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE (" << __FILE__ << ":" << __LINE__ << ")" << std::endl;
      return SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_UNKNOWN;
   }
}


const svg::String&
print_SVGFETurbulenceElement_SVG_STITCHTYPE(SVGFETurbulenceElement::SVG_STITCHTYPE val)
{
   switch (val) {

      case SVGFETurbulenceElement::SVG_STITCHTYPE_STITCH:
         return svg::stitch_attribute_string;

      case SVGFETurbulenceElement::SVG_STITCHTYPE_NOSTITCH:
         return svg::noStitch_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFETurbulenceElement_SVG_TURBULENCE_TYPE(SVGFETurbulenceElement::SVG_TURBULENCE_TYPE val)
{
   switch (val) {

      case SVGFETurbulenceElement::SVG_TURBULENCE_TYPE_FRACTALNOISE:
         return svg::fractalNoise_attribute_string;

      case SVGFETurbulenceElement::SVG_TURBULENCE_TYPE_TURBULENCE:
         return svg::turbulence_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGURIReference_SVG_XLINK_TYPE(SVGURIReference::SVG_XLINK_TYPE val)
{
   switch (val) {

      case SVGURIReference::SVG_XLINK_TYPE_SIMPLE:
         return svg::simple_attribute_string;

      case SVGURIReference::SVG_XLINK_TYPE_EXTENDED:
         return svg::extended_attribute_string;

      case SVGURIReference::SVG_XLINK_TYPE_LOCATOR:
         return svg::locator_attribute_string;

      case SVGURIReference::SVG_XLINK_TYPE_ARC:
         return svg::arc_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGURIReference_SVG_XLINK_SHOW(SVGURIReference::SVG_XLINK_SHOW val)
{
   switch (val) {

      case SVGURIReference::SVG_XLINK_SHOW_EMBED:
         return svg::embed_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGURIReference_SVG_XLINK_ACTUATE(SVGURIReference::SVG_XLINK_ACTUATE val)
{
   switch (val) {

      case SVGURIReference::SVG_XLINK_ACTUATE_ONREQUEST:
         return svg::onRequest_attribute_string;

      case SVGURIReference::SVG_XLINK_ACTUATE_ONLOAD:
         return svg::onLoad_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGLangSpace_SVG_XML_SPACE(SVGLangSpace::SVG_XML_SPACE val)
{
   switch (val) {

      case SVGLangSpace::SVG_XML_SPACE_DEFAULT:
         return svg::default_attribute_string;

      case SVGLangSpace::SVG_XML_SPACE_PRESERVE:
         return svg::preserve_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGTextContentElement_LENGTHADJUST(SVGTextContentElement::LENGTHADJUST val)
{
   switch (val) {

      case SVGTextContentElement::LENGTHADJUST_SPACING:
         return svg::spacing_attribute_string;

      case SVGTextContentElement::LENGTHADJUST_SPACINGANDGLYPHS:
         return svg::spacingAndGlyphs_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGTextPathElement_TEXTPATH_METHODTYPE(SVGTextPathElement::TEXTPATH_METHODTYPE val)
{
   switch (val) {

      case SVGTextPathElement::TEXTPATH_METHODTYPE_ALIGN:
         return svg::align_attribute_string;

      case SVGTextPathElement::TEXTPATH_METHODTYPE_STRETCH:
         return svg::stretch_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGTextPathElement_TEXTPATH_SPACINGTYPE(SVGTextPathElement::TEXTPATH_SPACINGTYPE val)
{
   switch (val) {

      case SVGTextPathElement::TEXTPATH_SPACINGTYPE_AUTO:
         return svg::auto_attribute_string;

      case SVGTextPathElement::TEXTPATH_SPACINGTYPE_EXACT:
         return svg::exact_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGAnimationElement_SVG_ANIMATION_ATTRIBUTE_TYPE(SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE val)
{
   switch (val) {

      case SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_CSS:
         return svg::CSS_attribute_string;

      case SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_XML:
         return svg::XML_attribute_string;

      case SVGAnimationElement::SVG_ANIMATION_ATTRIBUTE_TYPE_AUTO:
         return svg::auto_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGAnimationElement_SVG_ANIMATION_RESTART(SVGAnimationElement::SVG_ANIMATION_RESTART val)
{
   switch (val) {

      case SVGAnimationElement::SVG_ANIMATION_RESTART_ALWAYS:
         return svg::always_attribute_string;

      case SVGAnimationElement::SVG_ANIMATION_RESTART_NEVER:
         return svg::never_attribute_string;

      case SVGAnimationElement::SVG_ANIMATION_RESTART_WHENNOTACTIVE:
         return svg::whenNotActive_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGAnimationElement_SVG_ANIMATION_FILL(SVGAnimationElement::SVG_ANIMATION_FILL val)
{
   switch (val) {

      case SVGAnimationElement::SVG_ANIMATION_FILL_REMOVE:
         return svg::remove_attribute_string;

      case SVGAnimationElement::SVG_ANIMATION_FILL_FREEZE:
         return svg::freeze_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGMarkerElement_SVG_MARKERUNITS(SVGMarkerElement::SVG_MARKERUNITS val)
{
   switch (val) {

      case SVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH:
         return svg::strokeWidth_attribute_string;

      case SVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE:
         return svg::userSpaceOnUse_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGRenderingIntent_RENDERING_INTENT(SVGRenderingIntent::RENDERING_INTENT val)
{
   switch (val) {

      case SVGRenderingIntent::RENDERING_INTENT_AUTO:
         return svg::auto_attribute_string;

      case SVGRenderingIntent::RENDERING_INTENT_PERCEPTUAL:
         return svg::perceptual_attribute_string;

      case SVGRenderingIntent::RENDERING_INTENT_RELATIVE_COLORIMETRIC:
         return svg::relative_colorimetric_attribute_string;

      case SVGRenderingIntent::RENDERING_INTENT_SATURATION:
         return svg::saturation_attribute_string;

      case SVGRenderingIntent::RENDERING_INTENT_ABSOLUTE_COLORIMETRIC:
         return svg::absolute_colorimetric_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFEBlendElement_SVG_FEBLEND_MODE(SVGFEBlendElement::SVG_FEBLEND_MODE val)
{
   switch (val) {

      case SVGFEBlendElement::SVG_FEBLEND_MODE_NORMAL:
         return svg::normal_attribute_string;

      case SVGFEBlendElement::SVG_FEBLEND_MODE_MULTIPLY:
         return svg::multiply_attribute_string;

      case SVGFEBlendElement::SVG_FEBLEND_MODE_SCREEN:
         return svg::screen_attribute_string;

      case SVGFEBlendElement::SVG_FEBLEND_MODE_DARKEN:
         return svg::darken_attribute_string;

      case SVGFEBlendElement::SVG_FEBLEND_MODE_LIGHTEN:
         return svg::lighten_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFEColorMatrixElement_SVG_FECOLORMATRIX_TYPE(SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE val)
{
   switch (val) {

      case SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_MATRIX:
         return svg::matrix_attribute_string;

      case SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_SATURATE:
         return svg::saturate_attribute_string;

      case SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_HUEROTATE:
         return svg::hueRotate_attribute_string;

      case SVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA:
         return svg::luminanceToAlpha_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGUnitTypes_SVG_UNIT_TYPE(SVGUnitTypes::SVG_UNIT_TYPE val)
{
   switch (val) {

      case SVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE:
         return svg::userSpaceOnUse_attribute_string;

      case SVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX:
         return svg::objectBoundingBox_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGGradientElement_SVG_SPREADMETHOD(SVGGradientElement::SVG_SPREADMETHOD val)
{
   switch (val) {

      case SVGGradientElement::SVG_SPREADMETHOD_PAD:
         return svg::pad_attribute_string;

      case SVGGradientElement::SVG_SPREADMETHOD_REFLECT:
         return svg::reflect_attribute_string;

      case SVGGradientElement::SVG_SPREADMETHOD_REPEAT:
         return svg::repeat_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGComponentTransferFunctionElement_SVG_FECOMPONENTTRANSFER_TYPE(SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE val)
{
   switch (val) {

      case SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY:
         return svg::identity_attribute_string;

      case SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_TABLE:
         return svg::table_attribute_string;

      case SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE:
         return svg::discrete_attribute_string;

      case SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_LINEAR:
         return svg::linear_attribute_string;

      case SVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_GAMMA:
         return svg::gamma_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFEConvolveMatrixElement_SVG_EDGEMODE(SVGFEConvolveMatrixElement::SVG_EDGEMODE val)
{
   switch (val) {

      case SVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE:
         return svg::duplicate_attribute_string;

      case SVGFEConvolveMatrixElement::SVG_EDGEMODE_WRAP:
         return svg::wrap_attribute_string;

      case SVGFEConvolveMatrixElement::SVG_EDGEMODE_NONE:
         return svg::none_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFEDisplacementMapElement_SVG_CHANNEL(SVGFEDisplacementMapElement::SVG_CHANNEL val)
{
   switch (val) {

      case SVGFEDisplacementMapElement::SVG_CHANNEL_R:
         return svg::R_attribute_string;

      case SVGFEDisplacementMapElement::SVG_CHANNEL_G:
         return svg::G_attribute_string;

      case SVGFEDisplacementMapElement::SVG_CHANNEL_B:
         return svg::B_attribute_string;

      case SVGFEDisplacementMapElement::SVG_CHANNEL_A:
         return svg::A_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGAElement_SVG_XLINK_SHOW(SVGAElement::SVG_XLINK_SHOW val)
{
   switch (val) {

      case SVGAElement::SVG_XLINK_SHOW_NEW:
         return svg::new_attribute_string;

      case SVGAElement::SVG_XLINK_SHOW_REPLACE:
         return svg::replace_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFECompositeElement_SVG_FECOMPOSITE_OPERATOR(SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR val)
{
   switch (val) {

      case SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_OVER:
         return svg::over_attribute_string;

      case SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_IN:
         return svg::in_attribute_string;

      case SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_OUT:
         return svg::out_attribute_string;

      case SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_ATOP:
         return svg::atop_attribute_string;

      case SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_XOR:
         return svg::xor_attribute_string;

      case SVGFECompositeElement::SVG_FECOMPOSITE_OPERATOR_ARITHMETIC:
         return svg::arithmetic_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGFEMorphologyElement_SVG_MORPHOLOGY_OPERATOR(SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR val)
{
   switch (val) {

      case SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR_ERODE:
         return svg::erode_attribute_string;

      case SVGFEMorphologyElement::SVG_MORPHOLOGY_OPERATOR_DILATE:
         return svg::dilate_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGZoomAndPan_SVG_ZOOMANDPAN(SVGZoomAndPan::SVG_ZOOMANDPAN val)
{
   switch (val) {

      case SVGZoomAndPan::SVG_ZOOMANDPAN_DISABLE:
         return svg::disable_attribute_string;

      case SVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY:
         return svg::magnify_attribute_string;

      case SVGZoomAndPan::SVG_ZOOMANDPAN_ZOOM:
         return svg::zoom_attribute_string;

      default:
         return unknown_string;
   }
}

const svg::String&
print_SVGAnimateTransformElement_SVG_ANIMATETRANSFORM_TYPE(SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE val)
{
   switch (val) {

      case SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_TRANSLATE:
         return svg::translate_attribute_string;

      case SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_SCALE:
         return svg::scale_attribute_string;

      case SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_ROTATE:
         return svg::rotate_attribute_string;

      case SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_SKEWX:
         return svg::skewX_attribute_string;

      case SVGAnimateTransformElement::SVG_ANIMATETRANSFORM_TYPE_SKEWY:
         return svg::skewY_attribute_string;

      default:
         return unknown_string;
   }
}

}
