#ifndef __svg_SVGMaskElement__
#define __svg_SVGMaskElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGTests.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/SVGTransformable.hpp>
#include <w3c/svg/SVGUnitTypes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGMaskElement_element_string;
}

namespace svg {
	class SVGMaskElement :
		public SVGElement,
		public SVGTests,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public SVGTransformable,
		public SVGUnitTypes {
	public:
	protected:
		Attribute< Animated<SVG_UNIT_TYPE> > maskUnits;
		Attribute< SVGAnimatedLength > x;
		Attribute< SVGAnimatedLength > y;
		Attribute< SVGAnimatedLength > width;
		Attribute< SVGAnimatedLength > height;
	public:
		const Attribute< Animated<SVG_UNIT_TYPE> >& dom_getMaskUnits() const { return maskUnits; }

		const Attribute< SVGAnimatedLength >& dom_getX() const { return x; }

		const Attribute< SVGAnimatedLength >& dom_getY() const { return y; }

		const Attribute< SVGAnimatedLength >& dom_getWidth() const { return width; }

		const Attribute< SVGAnimatedLength >& dom_getHeight() const { return height; }

	public:
		const SVG_UNIT_TYPE & getMaskUnits() const { return maskUnits.getValue().getAnimatedVal().getValue(); }
		void setMaskUnits(const SVG_UNIT_TYPE& n)  { maskUnits.getValue().getAnimatedVal().setValue(n); maskUnits.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getX() const { return x.getValue().getAnimatedVal().getValue(); }
		void setX(const SVGLength& n)  { x.getValue().getAnimatedVal().setValue(n); x.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY() const { return y.getValue().getAnimatedVal().getValue(); }
		void setY(const SVGLength& n)  { y.getValue().getAnimatedVal().setValue(n); y.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getWidth() const { return width.getValue().getAnimatedVal().getValue(); }
		void setWidth(const SVGLength& n)  { width.getValue().getAnimatedVal().setValue(n); width.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getHeight() const { return height.getValue().getAnimatedVal().getValue(); }
		void setHeight(const SVGLength& n)  { height.getValue().getAnimatedVal().setValue(n); height.getValue().getBaseVal().setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGMaskElement();
		virtual const String getDtdElement() const { return SVGMaskElement_element_string; }
		SVGMaskElement(dom::Document* doc) : SVGElement(doc, SVGMaskElement_element_string) {}
	};
}


#endif // __svg_SVGMaskElement__
