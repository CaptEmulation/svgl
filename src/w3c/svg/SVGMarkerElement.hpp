#ifndef __svg_SVGMarkerElement__
#define __svg_SVGMarkerElement__

// generated by genFromIdl.py
	class xmlostream;
	class DOM_Node;

namespace svg {
	class SVGAngle;
	class SVGSVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/SVGFitToViewBox.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/SVGAnimatedAngle.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGMarkerElement_element_string;
}

namespace svg {
	class SVGMarkerElement :
		public SVGElement,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public SVGFitToViewBox {
	public:

		enum SVG_MARKERUNITS {
			SVG_MARKERUNITS_UNKNOWN = 0,
			SVG_MARKERUNITS_USERSPACEONUSE = 1,
			SVG_MARKERUNITS_STROKEWIDTH = 2
		};


		enum SVG_MARKER_ORIENT {
			SVG_MARKER_ORIENT_UNKNOWN = 0,
			SVG_MARKER_ORIENT_AUTO = 1,
			SVG_MARKER_ORIENT_ANGLE = 2
		};

	protected:
		Attribute< SVGAnimatedLength > refX;
		Attribute< SVGAnimatedLength > refY;
		Attribute< Animated<SVG_MARKERUNITS> > markerUnits;
		Attribute< SVGAnimatedLength > markerWidth;
		Attribute< SVGAnimatedLength > markerHeight;
		Attribute< Animated<SVG_MARKER_ORIENT> > orientType;
		Attribute< SVGAnimatedAngle > orientAngle;
	public:
		const Attribute< SVGAnimatedLength >& dom_getRefX() const { return refX; }

		const Attribute< SVGAnimatedLength >& dom_getRefY() const { return refY; }

		const Attribute< Animated<SVG_MARKERUNITS> >& dom_getMarkerUnits() const { return markerUnits; }

		const Attribute< SVGAnimatedLength >& dom_getMarkerWidth() const { return markerWidth; }

		const Attribute< SVGAnimatedLength >& dom_getMarkerHeight() const { return markerHeight; }

		const Attribute< Animated<SVG_MARKER_ORIENT> >& dom_getOrientType() const { return orientType; }

		const Attribute< SVGAnimatedAngle >& dom_getOrientAngle() const { return orientAngle; }

	public:
		const SVGLength & getRefX() const { return refX.getValue().getAnimatedVal().getValue(); }
		void setRefX(const SVGLength& n)  { refX.getValue().getAnimatedVal().setValue(n); refX.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getRefY() const { return refY.getValue().getAnimatedVal().getValue(); }
		void setRefY(const SVGLength& n)  { refY.getValue().getAnimatedVal().setValue(n); refY.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_MARKERUNITS & getMarkerUnits() const { return markerUnits.getValue().getAnimatedVal().getValue(); }
		void setMarkerUnits(const SVG_MARKERUNITS& n)  { markerUnits.getValue().getAnimatedVal().setValue(n); markerUnits.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getMarkerWidth() const { return markerWidth.getValue().getAnimatedVal().getValue(); }
		void setMarkerWidth(const SVGLength& n)  { markerWidth.getValue().getAnimatedVal().setValue(n); markerWidth.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getMarkerHeight() const { return markerHeight.getValue().getAnimatedVal().getValue(); }
		void setMarkerHeight(const SVGLength& n)  { markerHeight.getValue().getAnimatedVal().setValue(n); markerHeight.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_MARKER_ORIENT & getOrientType() const { return orientType.getValue().getAnimatedVal().getValue(); }
		void setOrientType(const SVG_MARKER_ORIENT& n)  { orientType.getValue().getAnimatedVal().setValue(n); orientType.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGAngle & getOrientAngle() const { return orientAngle.getValue().getAnimatedVal().getValue(); }
		void setOrientAngle(const SVGAngle& n)  { orientAngle.getValue().getAnimatedVal().setValue(n); orientAngle.getValue().getBaseVal().setValue(n);  setDamaged(true); }


public:
		void setOwnerAndViewPort(SVGSVGElement* owner, SVGElement* viewport);
	public:
		void glTraverseFromUse(svgl::Context*, svgl::GLInfo* glinfo, float shapeStrokeWidth, float shapeOrient);
		void pickTraverseFromUse(svgl::Context*, svgl::GLInfo* glinfo, float shapeStrokeWidth, float shapeOrient);

		virtual void glTraverse(svgl::Context*, svgl::GLInfo*)  ;

		virtual void pickTraverse(svgl::Context*, svgl::GLInfo*)  ;

  int customParseAttributes(const String& attrName, const String& attrValue);
	public:
		virtual void setOrientToAuto (  ) ;
		virtual void setOrientToAngle ( const SVGAngle& angle ) ;
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGMarkerElement();
		virtual const String getDtdElement() const { return SVGMarkerElement_element_string; }
		SVGMarkerElement(dom::Document* doc) : SVGElement(doc, SVGMarkerElement_element_string) {}
	};
}


#endif // __svg_SVGMarkerElement__
