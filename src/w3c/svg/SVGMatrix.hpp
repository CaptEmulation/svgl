#ifndef __svg_SVGMatrix__
#define __svg_SVGMatrix__

// generated by genFromIdl.py

namespace svg {
	class SVGMatrix;
}

#include <w3c/svg/Attribute.hpp>

namespace svg {
	class SVGMatrix {
	public:
	protected:
		Attribute< float > a;
		Attribute< float > b;
		Attribute< float > c;
		Attribute< float > d;
		Attribute< float > e;
		Attribute< float > f;
	public:
		const Attribute< float >& dom_getA() const { return a; }
		Attribute< float >& dom_getA() { return a; }
		void dom_setA(const float& n)  { a.setValue(n); }

		const Attribute< float >& dom_getB() const { return b; }
		Attribute< float >& dom_getB() { return b; }
		void dom_setB(const float& n)  { b.setValue(n); }

		const Attribute< float >& dom_getC() const { return c; }
		Attribute< float >& dom_getC() { return c; }
		void dom_setC(const float& n)  { c.setValue(n); }

		const Attribute< float >& dom_getD() const { return d; }
		Attribute< float >& dom_getD() { return d; }
		void dom_setD(const float& n)  { d.setValue(n); }

		const Attribute< float >& dom_getE() const { return e; }
		Attribute< float >& dom_getE() { return e; }
		void dom_setE(const float& n)  { e.setValue(n); }

		const Attribute< float >& dom_getF() const { return f; }
		Attribute< float >& dom_getF() { return f; }
		void dom_setF(const float& n)  { f.setValue(n); }

	public:
		const float & getA() const { return a.getValue(); }
		float & getA() { return a.getValue(); }
		void setA(const float& n)  { a.setValue(n); }

		const float & getB() const { return b.getValue(); }
		float & getB() { return b.getValue(); }
		void setB(const float& n)  { b.setValue(n); }

		const float & getC() const { return c.getValue(); }
		float & getC() { return c.getValue(); }
		void setC(const float& n)  { c.setValue(n); }

		const float & getD() const { return d.getValue(); }
		float & getD() { return d.getValue(); }
		void setD(const float& n)  { d.setValue(n); }

		const float & getE() const { return e.getValue(); }
		float & getE() { return e.getValue(); }
		void setE(const float& n)  { e.setValue(n); }

		const float & getF() const { return f.getValue(); }
		float & getF() { return f.getValue(); }
		void setF(const float& n)  { f.setValue(n); }

	public:
		virtual SVGMatrix* multiply ( const SVGMatrix& secondMatrix ) ;
		virtual SVGMatrix* inverse (  ) ;
		virtual SVGMatrix* translate ( float x, float y ) ;
		virtual SVGMatrix* scale ( float scaleFactor ) ;
		virtual SVGMatrix* scaleNonUniform ( float scaleFactorX, float scaleFactorY ) ;
		virtual SVGMatrix* rotate ( float angle ) ;
		virtual SVGMatrix* rotateFromVector ( float x, float y ) ;
		virtual SVGMatrix* flipX (  ) ;
		virtual SVGMatrix* flipY (  ) ;
		virtual SVGMatrix* skewX ( float angle ) ;
		virtual SVGMatrix* skewY ( float angle ) ;

	public:
		virtual ~SVGMatrix();
	};
}


#endif // __svg_SVGMatrix__
