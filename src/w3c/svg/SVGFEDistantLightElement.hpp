#ifndef __svg_SVGFEDistantLightElement__
#define __svg_SVGFEDistantLightElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFEDistantLightElement_element_string;
}

namespace svg {
	class SVGFEDistantLightElement :
		public SVGElement {
	public:
	protected:
		Attribute< SVGAnimatedNumber > azimuth;
		Attribute< SVGAnimatedNumber > elevation;
	public:
		const Attribute< SVGAnimatedNumber >& dom_getAzimuth() const { return azimuth; }

		const Attribute< SVGAnimatedNumber >& dom_getElevation() const { return elevation; }

	public:
		const SVGNumber & getAzimuth() const { return azimuth.getValue().getAnimatedVal().getValue(); }
		void setAzimuth(const SVGNumber& n)  { azimuth.getValue().getAnimatedVal().setValue(n); azimuth.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getElevation() const { return elevation.getValue().getAnimatedVal().getValue(); }
		void setElevation(const SVGNumber& n)  { elevation.getValue().getAnimatedVal().setValue(n); elevation.getValue().getBaseVal().setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFEDistantLightElement();
		virtual const String getDtdElement() const { return SVGFEDistantLightElement_element_string; }
		SVGFEDistantLightElement(dom::Document* doc) : SVGElement(doc, SVGFEDistantLightElement_element_string) {}
	};
}


#endif // __svg_SVGFEDistantLightElement__
