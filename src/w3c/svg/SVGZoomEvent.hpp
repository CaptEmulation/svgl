#ifndef __svg_SVGZoomEvent__
#define __svg_SVGZoomEvent__

// generated by genFromIdl.py

namespace svg {
}

#include <w3c/events/UIEvent.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGRect.hpp>
#include <w3c/svg/SVGPoint.hpp>

namespace svg {
	class SVGZoomEvent :
		public events::UIEvent {
	public:
	protected:
		Attribute< SVGRect > zoomRectScreen;
		Attribute< float > previousScale;
		Attribute< SVGPoint > previousTranslate;
		Attribute< float > newScale;
		Attribute< SVGPoint > newTranslate;
	public:
		const Attribute< SVGRect >& dom_getZoomRectScreen() const { return zoomRectScreen; }

		const Attribute< float >& dom_getPreviousScale() const { return previousScale; }

		const Attribute< SVGPoint >& dom_getPreviousTranslate() const { return previousTranslate; }

		const Attribute< float >& dom_getNewScale() const { return newScale; }

		const Attribute< SVGPoint >& dom_getNewTranslate() const { return newTranslate; }

	public:
		const SVGRect & getZoomRectScreen() const { return zoomRectScreen.getValue(); }
		void setZoomRectScreen(const SVGRect& n)  { zoomRectScreen.setValue(n); }

		const float & getPreviousScale() const { return previousScale.getValue(); }
		void setPreviousScale(const float& n)  { previousScale.setValue(n); }

		const SVGPoint & getPreviousTranslate() const { return previousTranslate.getValue(); }
		void setPreviousTranslate(const SVGPoint& n)  { previousTranslate.setValue(n); }

		const float & getNewScale() const { return newScale.getValue(); }
		void setNewScale(const float& n)  { newScale.setValue(n); }

		const SVGPoint & getNewTranslate() const { return newTranslate.getValue(); }
		void setNewTranslate(const SVGPoint& n)  { newTranslate.setValue(n); }

	public:

	public:
		virtual ~SVGZoomEvent();
	};
}


#endif // __svg_SVGZoomEvent__
