#ifndef __svg_SVGGlyphRefElement__
#define __svg_SVGGlyphRefElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGURIReference.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGGlyphRefElement_element_string;
}

namespace svg {
	class SVGGlyphRefElement :
		public SVGElement,
		public SVGURIReference,
		public SVGStylable {
	public:
	protected:
		Attribute< DOMString > glyphRef;
		Attribute< DOMString > format;
		Attribute< float > x;
		Attribute< float > y;
		Attribute< float > dx;
		Attribute< float > dy;
	public:
		const Attribute< DOMString >& dom_getGlyphRef() const { return glyphRef; }
		Attribute< DOMString >& dom_getGlyphRef() { return glyphRef; }
		void dom_setGlyphRef(const DOMString& n)  { glyphRef.setValue(n); }

		const Attribute< DOMString >& dom_getFormat() const { return format; }
		Attribute< DOMString >& dom_getFormat() { return format; }
		void dom_setFormat(const DOMString& n)  { format.setValue(n); }

		const Attribute< float >& dom_getX() const { return x; }
		Attribute< float >& dom_getX() { return x; }
		void dom_setX(const float& n)  { x.setValue(n); }

		const Attribute< float >& dom_getY() const { return y; }
		Attribute< float >& dom_getY() { return y; }
		void dom_setY(const float& n)  { y.setValue(n); }

		const Attribute< float >& dom_getDx() const { return dx; }
		Attribute< float >& dom_getDx() { return dx; }
		void dom_setDx(const float& n)  { dx.setValue(n); }

		const Attribute< float >& dom_getDy() const { return dy; }
		Attribute< float >& dom_getDy() { return dy; }
		void dom_setDy(const float& n)  { dy.setValue(n); }

	public:
		const DOMString & getGlyphRef() const { return glyphRef.getValue(); }
		DOMString & getGlyphRef() { return glyphRef.getValue(); }
		void setGlyphRef(const DOMString& n)  { glyphRef.setValue(n);  setDamaged(true); }

		const DOMString & getFormat() const { return format.getValue(); }
		DOMString & getFormat() { return format.getValue(); }
		void setFormat(const DOMString& n)  { format.setValue(n);  setDamaged(true); }

		const float & getX() const { return x.getValue(); }
		float & getX() { return x.getValue(); }
		void setX(const float& n)  { x.setValue(n);  setDamaged(true); }

		const float & getY() const { return y.getValue(); }
		float & getY() { return y.getValue(); }
		void setY(const float& n)  { y.setValue(n);  setDamaged(true); }

		const float & getDx() const { return dx.getValue(); }
		float & getDx() { return dx.getValue(); }
		void setDx(const float& n)  { dx.setValue(n);  setDamaged(true); }

		const float & getDy() const { return dy.getValue(); }
		float & getDy() { return dy.getValue(); }
		void setDy(const float& n)  { dy.setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGGlyphRefElement();
		virtual const String getDtdElement() const { return SVGGlyphRefElement_element_string; }
		SVGGlyphRefElement(dom::Document* doc) : SVGElement(doc, SVGGlyphRefElement_element_string) {}
	};
}


#endif // __svg_SVGGlyphRefElement__
