#ifndef __svg_SVGPaint__
#define __svg_SVGPaint__

// generated by genFromIdl.py

namespace svg {
}

#include <w3c/svg/SVGColor.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/DOMString.hpp>

namespace svg {
	class SVGPaint :
		public SVGColor {
	public:

		enum SVG_PAINTTYPE {
			SVG_PAINTTYPE_UNKNOWN = 0,
			SVG_PAINTTYPE_RGBCOLOR = 1,
			SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR = 2,
			SVG_PAINTTYPE_NONE = 101,
			SVG_PAINTTYPE_CURRENTCOLOR = 102,
			SVG_PAINTTYPE_URI_NONE = 103,
			SVG_PAINTTYPE_URI_CURRENTCOLOR = 104,
			SVG_PAINTTYPE_URI_RGBCOLOR = 105,
			SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR = 106
		};

	protected:
		Attribute< SVG_PAINTTYPE > paintType;
		Attribute< DOMString > uri;
	public:
		const Attribute< SVG_PAINTTYPE >& dom_getPaintType() const { return paintType; }

		const Attribute< DOMString >& dom_getUri() const { return uri; }

	public:
		const SVG_PAINTTYPE & getPaintType() const { return paintType.getValue(); }
		void setPaintType(const SVG_PAINTTYPE& n)  { paintType.setValue(n); }

		const DOMString & getUri() const { return uri.getValue(); }
	public:
		virtual void setUri ( const DOMString& uri ) ;
		virtual void setPaint ( unsigned short paintType, const DOMString& uri, const DOMString& rgbColor, const DOMString& iccColor ) ;

	public:
		virtual ~SVGPaint();
	};
}


#endif // __svg_SVGPaint__
