#ifndef __svg_SVGPreserveAspectRatio__
#define __svg_SVGPreserveAspectRatio__

// generated by genFromIdl.py

namespace svg {
	class SVGRect;
}

namespace svgl {
	class Context;
	class GLInfo;
}

#include <w3c/svg/Attribute.hpp>

namespace svg {
	class SVGPreserveAspectRatio {
	public:

		enum SVG_PRESERVEASPECTRATIO {
			SVG_PRESERVEASPECTRATIO_UNKNOWN = 0,
			SVG_PRESERVEASPECTRATIO_NONE = 1,
			SVG_PRESERVEASPECTRATIO_XMINYMIN = 2,
			SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3,
			SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4,
			SVG_PRESERVEASPECTRATIO_XMINYMID = 5,
			SVG_PRESERVEASPECTRATIO_XMIDYMID = 6,
			SVG_PRESERVEASPECTRATIO_XMAXYMID = 7,
			SVG_PRESERVEASPECTRATIO_XMINYMAX = 8,
			SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9,
			SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10
		};


		enum SVG_MEETORSLICE {
			SVG_MEETORSLICE_UNKNOWN = 0,
			SVG_MEETORSLICE_MEET = 1,
			SVG_MEETORSLICE_SLICE = 2
		};

	protected:
		Attribute< SVG_PRESERVEASPECTRATIO > align;
		Attribute< SVG_MEETORSLICE > meetOrSlice;
	public:
		const Attribute< SVG_PRESERVEASPECTRATIO >& dom_getAlign() const { return align; }
		Attribute< SVG_PRESERVEASPECTRATIO >& dom_getAlign() { return align; }
		void dom_setAlign(const SVG_PRESERVEASPECTRATIO& n)  { align.setValue(n); }

		const Attribute< SVG_MEETORSLICE >& dom_getMeetOrSlice() const { return meetOrSlice; }
		Attribute< SVG_MEETORSLICE >& dom_getMeetOrSlice() { return meetOrSlice; }
		void dom_setMeetOrSlice(const SVG_MEETORSLICE& n)  { meetOrSlice.setValue(n); }

	public:
		const SVG_PRESERVEASPECTRATIO & getAlign() const { return align.getValue(); }
		SVG_PRESERVEASPECTRATIO & getAlign() { return align.getValue(); }
		void setAlign(const SVG_PRESERVEASPECTRATIO& n)  { align.setValue(n); }

		const SVG_MEETORSLICE & getMeetOrSlice() const { return meetOrSlice.getValue(); }
		SVG_MEETORSLICE & getMeetOrSlice() { return meetOrSlice.getValue(); }
		void setMeetOrSlice(const SVG_MEETORSLICE& n)  { meetOrSlice.setValue(n); }


	protected:
		bool _dostencil;
	public:
		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, const SVGRect& viewbox, float width, float height);
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, const SVGRect& viewbox, float width, float height);

	public:
		virtual ~SVGPreserveAspectRatio() {}
	public:
	};
}


#endif // __svg_SVGPreserveAspectRatio__
