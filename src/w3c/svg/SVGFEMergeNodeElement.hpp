#ifndef __svg_SVGFEMergeNodeElement__
#define __svg_SVGFEMergeNodeElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class FilterContext;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFEMergeNodeElement_element_string;
}

namespace svg {
	class SVGFEMergeNodeElement :
		public SVGElement {
	public:
	protected:
		Attribute< SVGAnimatedString > in1;
	public:
		const Attribute< SVGAnimatedString >& dom_getIn1() const { return in1; }

	public:
		const SVGString & getIn1() const { return in1.getValue().getAnimatedVal().getValue(); }
		void setIn1(const SVGString& n)  { in1.getValue().getAnimatedVal().setValue(n); in1.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual unicode::String* getOptionalIn1();
		virtual unicode::String* getOptionalIn2();
		virtual unicode::String* getOptionalResult();

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFEMergeNodeElement();
		virtual const String getDtdElement() const { return SVGFEMergeNodeElement_element_string; }
		SVGFEMergeNodeElement(dom::Document* doc) : SVGElement(doc, SVGFEMergeNodeElement_element_string) {}
	};
}


#endif // __svg_SVGFEMergeNodeElement__
