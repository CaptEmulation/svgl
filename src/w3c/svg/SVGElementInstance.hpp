#ifndef __svg_SVGElementInstance__
#define __svg_SVGElementInstance__

// generated by genFromIdl.py

namespace svg {
	class SVGElement;
	class SVGUseElement;
	class SVGElementInstance;
	class SVGElementInstanceList;
	class SVGElementInstance;
	class SVGElementInstance;
	class SVGElementInstance;
	class SVGElementInstance;
}

#include <w3c/events/EventTarget.hpp>
#include <w3c/svg/Attribute.hpp>

namespace svg {
	class SVGElementInstance :
		public events::EventTarget {
	public:
	protected:
		Attribute< SVGElement* > correspondingElement;
		Attribute< SVGUseElement* > correspondingUseElement;
		Attribute< SVGElementInstance* > parentNode;
		Attribute< SVGElementInstanceList* > childNodes;
		Attribute< SVGElementInstance* > firstChild;
		Attribute< SVGElementInstance* > lastChild;
		Attribute< SVGElementInstance* > previousSibling;
		Attribute< SVGElementInstance* > nextSibling;
	public:
		const Attribute< SVGElement* >& dom_getCorrespondingElement() const { return correspondingElement; }

		const Attribute< SVGUseElement* >& dom_getCorrespondingUseElement() const { return correspondingUseElement; }

		const Attribute< SVGElementInstance* >& dom_getParentNode() const { return parentNode; }

		const Attribute< SVGElementInstanceList* >& dom_getChildNodes() const { return childNodes; }

		const Attribute< SVGElementInstance* >& dom_getFirstChild() const { return firstChild; }

		const Attribute< SVGElementInstance* >& dom_getLastChild() const { return lastChild; }

		const Attribute< SVGElementInstance* >& dom_getPreviousSibling() const { return previousSibling; }

		const Attribute< SVGElementInstance* >& dom_getNextSibling() const { return nextSibling; }

	public:
		const SVGElement* getCorrespondingElement() const { return correspondingElement.getValue(); }
		void setCorrespondingElement(SVGElement* n)  { correspondingElement.setValue(n); }

		const SVGUseElement* getCorrespondingUseElement() const { return correspondingUseElement.getValue(); }
		void setCorrespondingUseElement(SVGUseElement* n)  { correspondingUseElement.setValue(n); }

		const SVGElementInstance* getParentNode() const { return parentNode.getValue(); }
		void setParentNode(SVGElementInstance* n)  { parentNode.setValue(n); }

		const SVGElementInstanceList* getChildNodes() const { return childNodes.getValue(); }
		void setChildNodes(SVGElementInstanceList* n)  { childNodes.setValue(n); }

		const SVGElementInstance* getFirstChild() const { return firstChild.getValue(); }
		void setFirstChild(SVGElementInstance* n)  { firstChild.setValue(n); }

		const SVGElementInstance* getLastChild() const { return lastChild.getValue(); }
		void setLastChild(SVGElementInstance* n)  { lastChild.setValue(n); }

		const SVGElementInstance* getPreviousSibling() const { return previousSibling.getValue(); }
		void setPreviousSibling(SVGElementInstance* n)  { previousSibling.setValue(n); }

		const SVGElementInstance* getNextSibling() const { return nextSibling.getValue(); }
		void setNextSibling(SVGElementInstance* n)  { nextSibling.setValue(n); }


public:
		SVGElementInstance() {}
	public:

	public:
		virtual ~SVGElementInstance();
	};
}


#endif // __svg_SVGElementInstance__
