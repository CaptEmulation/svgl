#ifndef __svg_SVGFilterPrimitiveStandardAttributes__
#define __svg_SVGFilterPrimitiveStandardAttributes__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace unicode {
	class String;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class FilterContext;
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGFilterPrimitiveStandardAttributes {
	public:
	protected:
		Attribute< SVGAnimatedLength > x;
		Attribute< SVGAnimatedLength > y;
		Attribute< SVGAnimatedLength > width;
		Attribute< SVGAnimatedLength > height;
		Attribute< SVGAnimatedString > result;
	public:
		const Attribute< SVGAnimatedLength >& dom_getX() const { return x; }

		const Attribute< SVGAnimatedLength >& dom_getY() const { return y; }

		const Attribute< SVGAnimatedLength >& dom_getWidth() const { return width; }

		const Attribute< SVGAnimatedLength >& dom_getHeight() const { return height; }

		const Attribute< SVGAnimatedString >& dom_getResult() const { return result; }

	public:
		const SVGLength & getX() const { return x.getValue().getAnimatedVal().getValue(); }
		void setX(const SVGLength& n)  { x.getValue().getAnimatedVal().setValue(n); x.getValue().getBaseVal().setValue(n); }

		const SVGLength & getY() const { return y.getValue().getAnimatedVal().getValue(); }
		void setY(const SVGLength& n)  { y.getValue().getAnimatedVal().setValue(n); y.getValue().getBaseVal().setValue(n); }

		const SVGLength & getWidth() const { return width.getValue().getAnimatedVal().getValue(); }
		void setWidth(const SVGLength& n)  { width.getValue().getAnimatedVal().setValue(n); width.getValue().getBaseVal().setValue(n); }

		const SVGLength & getHeight() const { return height.getValue().getAnimatedVal().getValue(); }
		void setHeight(const SVGLength& n)  { height.getValue().getAnimatedVal().setValue(n); height.getValue().getBaseVal().setValue(n); }

		const SVGString & getResult() const { return result.getValue().getAnimatedVal().getValue(); }
		void setResult(const SVGString& n)  { result.getValue().getAnimatedVal().setValue(n); result.getValue().getBaseVal().setValue(n); }


		virtual void glTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*, unicode::String* in1, unicode::String* result);


		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual unicode::String* getOptionalIn1();
		virtual unicode::String* getOptionalIn2();
		virtual unicode::String* getOptionalResult();


	public:
		virtual ~SVGFilterPrimitiveStandardAttributes() {}
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGFilterPrimitiveStandardAttributes__
