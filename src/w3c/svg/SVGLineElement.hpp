#ifndef __svg_SVGLineElement__
#define __svg_SVGLineElement__

// generated by genFromIdl.py
	class xmlostream;
	class BezierPath;

namespace svg {
}

namespace agg {
	class path_storage;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGTests.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/SVGTransformable.hpp>
#include <w3c/events/EventTarget.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGLineElement_element_string;
}

namespace svg {
	class SVGLineElement :
		public SVGElement,
		public SVGTests,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public SVGTransformable,
		public events::EventTarget {
	public:
	protected:
		Attribute< SVGAnimatedLength > x1;
		Attribute< SVGAnimatedLength > y1;
		Attribute< SVGAnimatedLength > x2;
		Attribute< SVGAnimatedLength > y2;
	public:
		const Attribute< SVGAnimatedLength >& dom_getX1() const { return x1; }

		const Attribute< SVGAnimatedLength >& dom_getY1() const { return y1; }

		const Attribute< SVGAnimatedLength >& dom_getX2() const { return x2; }

		const Attribute< SVGAnimatedLength >& dom_getY2() const { return y2; }

	public:
		const SVGLength & getX1() const { return x1.getValue().getAnimatedVal().getValue(); }
		void setX1(const SVGLength& n)  { x1.getValue().getAnimatedVal().setValue(n); x1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY1() const { return y1.getValue().getAnimatedVal().getValue(); }
		void setY1(const SVGLength& n)  { y1.getValue().getAnimatedVal().setValue(n); y1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getX2() const { return x2.getValue().getAnimatedVal().getValue(); }
		void setX2(const SVGLength& n)  { x2.getValue().getAnimatedVal().setValue(n); x2.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY2() const { return y2.getValue().getAnimatedVal().getValue(); }
		void setY2(const SVGLength& n)  { y2.getValue().getAnimatedVal().setValue(n); y2.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		virtual void glTraverse(svgl::Context*, svgl::GLInfo*)  ;

		virtual void pickTraverse(svgl::Context*, svgl::GLInfo*)  ;

	  virtual void getBoundingBox(svgl::Context* svglContext, svgl::GLInfo* glinfo, float*, float*, float*, float*) ;
	  //virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo) ;
	  //virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw) ;
          virtual void glTraverseBoundingBox(svgl::Context * svglContext, svgl::GLInfo* glinfo) ;
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, BezierPath*);
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, agg::path_storage*);

	  virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo);
	  virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw);

	bool canBeCompiled();
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGLineElement();
		virtual const String getDtdElement() const { return SVGLineElement_element_string; }
		SVGLineElement(dom::Document* doc) : SVGElement(doc, SVGLineElement_element_string) {}
	};
}


#endif // __svg_SVGLineElement__
