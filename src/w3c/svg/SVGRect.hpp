#ifndef __svg_SVGRect__
#define __svg_SVGRect__

// generated by genFromIdl.py

namespace svg {
}

#include <w3c/svg/Attribute.hpp>

namespace svg {
	class SVGRect {
	public:
	protected:
		Attribute< float > x;
		Attribute< float > y;
		Attribute< float > width;
		Attribute< float > height;
	public:
		const Attribute< float >& dom_getX() const { return x; }
		Attribute< float >& dom_getX() { return x; }
		void dom_setX(const float& n)  { x.setValue(n); }

		const Attribute< float >& dom_getY() const { return y; }
		Attribute< float >& dom_getY() { return y; }
		void dom_setY(const float& n)  { y.setValue(n); }

		const Attribute< float >& dom_getWidth() const { return width; }
		Attribute< float >& dom_getWidth() { return width; }
		void dom_setWidth(const float& n)  { width.setValue(n); }

		const Attribute< float >& dom_getHeight() const { return height; }
		Attribute< float >& dom_getHeight() { return height; }
		void dom_setHeight(const float& n)  { height.setValue(n); }

	public:
		const float & getX() const { return x.getValue(); }
		float & getX() { return x.getValue(); }
		void setX(const float& n)  { x.setValue(n); }

		const float & getY() const { return y.getValue(); }
		float & getY() { return y.getValue(); }
		void setY(const float& n)  { y.setValue(n); }

		const float & getWidth() const { return width.getValue(); }
		float & getWidth() { return width.getValue(); }
		void setWidth(const float& n)  { width.setValue(n); }

		const float & getHeight() const { return height.getValue(); }
		float & getHeight() { return height.getValue(); }
		void setHeight(const float& n)  { height.setValue(n); }

	public:

	public:
		virtual ~SVGRect();
	};
}


#endif // __svg_SVGRect__
