#ifndef __svg_SVGFEDisplacementMapElement__
#define __svg_SVGFEDisplacementMapElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGFilterPrimitiveStandardAttributes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFEDisplacementMapElement_element_string;
}

namespace svg {
	class SVGFEDisplacementMapElement :
		public SVGElement,
		public SVGFilterPrimitiveStandardAttributes {
	public:

		enum SVG_CHANNEL {
			SVG_CHANNEL_UNKNOWN = 0,
			SVG_CHANNEL_R = 1,
			SVG_CHANNEL_G = 2,
			SVG_CHANNEL_B = 3,
			SVG_CHANNEL_A = 4
		};

	protected:
		Attribute< SVGAnimatedString > in1;
		Attribute< SVGAnimatedString > in2;
		Attribute< SVGAnimatedNumber > scale;
		Attribute< Animated<SVG_CHANNEL> > xChannelSelector;
		Attribute< Animated<SVG_CHANNEL> > yChannelSelector;
	public:
		const Attribute< SVGAnimatedString >& dom_getIn1() const { return in1; }

		const Attribute< SVGAnimatedString >& dom_getIn2() const { return in2; }

		const Attribute< SVGAnimatedNumber >& dom_getScale() const { return scale; }

		const Attribute< Animated<SVG_CHANNEL> >& dom_getXChannelSelector() const { return xChannelSelector; }

		const Attribute< Animated<SVG_CHANNEL> >& dom_getYChannelSelector() const { return yChannelSelector; }

	public:
		const SVGString & getIn1() const { return in1.getValue().getAnimatedVal().getValue(); }
		void setIn1(const SVGString& n)  { in1.getValue().getAnimatedVal().setValue(n); in1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGString & getIn2() const { return in2.getValue().getAnimatedVal().getValue(); }
		void setIn2(const SVGString& n)  { in2.getValue().getAnimatedVal().setValue(n); in2.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getScale() const { return scale.getValue().getAnimatedVal().getValue(); }
		void setScale(const SVGNumber& n)  { scale.getValue().getAnimatedVal().setValue(n); scale.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_CHANNEL & getXChannelSelector() const { return xChannelSelector.getValue().getAnimatedVal().getValue(); }
		void setXChannelSelector(const SVG_CHANNEL& n)  { xChannelSelector.getValue().getAnimatedVal().setValue(n); xChannelSelector.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_CHANNEL & getYChannelSelector() const { return yChannelSelector.getValue().getAnimatedVal().getValue(); }
		void setYChannelSelector(const SVG_CHANNEL& n)  { yChannelSelector.getValue().getAnimatedVal().setValue(n); yChannelSelector.getValue().getBaseVal().setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFEDisplacementMapElement();
		virtual const String getDtdElement() const { return SVGFEDisplacementMapElement_element_string; }
		SVGFEDisplacementMapElement(dom::Document* doc) : SVGElement(doc, SVGFEDisplacementMapElement_element_string) {}
	};
}


#endif // __svg_SVGFEDisplacementMapElement__
