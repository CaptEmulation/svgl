#ifndef __svg_SVGTSpanElement__
#define __svg_SVGTSpanElement__

// generated by genFromIdl.py
	class xmlostream;
	class BezierPath;

namespace svg {
}

namespace agg {
	class path_storage;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class TextInfo;
}

namespace dom {
	class Text;
}

#include <w3c/svg/SVGTextPositioningElement.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGTSpanElement_element_string;
}

namespace svg {
	class SVGTSpanElement :
		public SVGTextPositioningElement {
	public:

    public:
		virtual void glTextTraverse(svgl::Context*, svgl::GLInfo*, svgl::TextInfo*) ;
		virtual void glTextTraversePCDATA(svgl::Context*, svgl::GLInfo*, svgl::TextInfo*, dom::Text*) ;


	  virtual void getBoundingBox(svgl::Context* svglContext, svgl::GLInfo* glinfo, float*, float*, float*, float*) ;
	  //virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo) ;
	  //virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw) ;
          virtual void glTraverseBoundingBox(svgl::Context * svglContext, svgl::GLInfo* glinfo) ;
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, BezierPath*);
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, agg::path_storage*);

	  virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo);
	  virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw);
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGTSpanElement();
		virtual const String getDtdElement() const { return SVGTSpanElement_element_string; }
		SVGTSpanElement(dom::Document* doc) : SVGTextPositioningElement(doc, SVGTSpanElement_element_string) {}
	};
}


#endif // __svg_SVGTSpanElement__
