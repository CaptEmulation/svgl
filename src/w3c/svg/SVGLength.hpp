#ifndef __svg_SVGLength__
#define __svg_SVGLength__

// generated by genFromIdl.py

namespace svg {
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>

namespace svg {
	class SVGLength {
	public:

		enum SVG_LENGTHTYPE {
			SVG_LENGTHTYPE_UNKNOWN = 0,
			SVG_LENGTHTYPE_NUMBER = 1,
			SVG_LENGTHTYPE_PERCENTAGE = 2,
			SVG_LENGTHTYPE_EMS = 3,
			SVG_LENGTHTYPE_EXS = 4,
			SVG_LENGTHTYPE_PX = 5,
			SVG_LENGTHTYPE_CM = 6,
			SVG_LENGTHTYPE_MM = 7,
			SVG_LENGTHTYPE_IN = 8,
			SVG_LENGTHTYPE_PT = 9,
			SVG_LENGTHTYPE_PC = 10
		};

	protected:
		Attribute< SVG_LENGTHTYPE > unitType;
		Attribute< float > value;
		Attribute< float > valueInSpecifiedUnits;
		Attribute< DOMString > valueAsString;
	public:
		const Attribute< SVG_LENGTHTYPE >& dom_getUnitType() const { return unitType; }

		const Attribute< float >& dom_getValue() const { return value; }
		Attribute< float >& dom_getValue() { return value; }
		void dom_setValue(const float& n)  { value.setValue(n); }

		const Attribute< float >& dom_getValueInSpecifiedUnits() const { return valueInSpecifiedUnits; }
		Attribute< float >& dom_getValueInSpecifiedUnits() { return valueInSpecifiedUnits; }
		void dom_setValueInSpecifiedUnits(const float& n)  { valueInSpecifiedUnits.setValue(n); }

		const Attribute< DOMString >& dom_getValueAsString() const { return valueAsString; }
		Attribute< DOMString >& dom_getValueAsString() { return valueAsString; }
		void dom_setValueAsString(const DOMString& n)  ;

	public:
		const SVG_LENGTHTYPE & getUnitType() const { return unitType.getValue(); }
		void setUnitType(const SVG_LENGTHTYPE& n)  { unitType.setValue(n); }

		const float & getValue() const { return value.getValue(); }
		float & getValue() { return value.getValue(); }
		void setValue(const float& n)  { value.setValue(n); }

		const float & getValueInSpecifiedUnits() const { return valueInSpecifiedUnits.getValue(); }
		float & getValueInSpecifiedUnits() { return valueInSpecifiedUnits.getValue(); }
		void setValueInSpecifiedUnits(const float& n)  { valueInSpecifiedUnits.setValue(n); }

		const DOMString & getValueAsString() const { return valueAsString.getValue(); }
		DOMString & getValueAsString() { return valueAsString.getValue(); }
		void setValueAsString(const DOMString& n)  ;


	private:
bool _computed;
	public:
		SVGLength() : unitType(SVG_LENGTHTYPE_UNKNOWN), value(0), valueInSpecifiedUnits(0), _computed(false) {}
		SVGLength(float v) : unitType(SVG_LENGTHTYPE_NUMBER), value(v), valueInSpecifiedUnits(v), _computed(true) {}
		float computeValue(float pdi=90., float percentage=1., float fontSize=1., float xHeight=1.);
		bool isAbsolute() const;
	public:
		virtual void newValueSpecifiedUnits ( unsigned short unitType, float valueInSpecifiedUnits ) ;
		virtual void convertToSpecifiedUnits ( unsigned short unitType ) ;

	public:
		virtual ~SVGLength();
	};
}


#endif // __svg_SVGLength__
