#ifndef __svg_SVGFETurbulenceElement__
#define __svg_SVGFETurbulenceElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGFilterPrimitiveStandardAttributes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/SVGAnimatedInteger.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFETurbulenceElement_element_string;
}

namespace svg {
	class SVGFETurbulenceElement :
		public SVGElement,
		public SVGFilterPrimitiveStandardAttributes {
	public:

		enum SVG_TURBULENCE_TYPE {
			SVG_TURBULENCE_TYPE_UNKNOWN = 0,
			SVG_TURBULENCE_TYPE_FRACTALNOISE = 1,
			SVG_TURBULENCE_TYPE_TURBULENCE = 2
		};


		enum SVG_STITCHTYPE {
			SVG_STITCHTYPE_UNKNOWN = 0,
			SVG_STITCHTYPE_STITCH = 1,
			SVG_STITCHTYPE_NOSTITCH = 2
		};

	protected:
		Attribute< SVGAnimatedNumber > baseFrequencyX;
		Attribute< SVGAnimatedNumber > baseFrequencyY;
		Attribute< SVGAnimatedInteger > numOctaves;
		Attribute< SVGAnimatedNumber > seed;
		Attribute< Animated<SVG_STITCHTYPE> > stitchTiles;
		Attribute< Animated<SVG_TURBULENCE_TYPE> > type;
	public:
		const Attribute< SVGAnimatedNumber >& dom_getBaseFrequencyX() const { return baseFrequencyX; }

		const Attribute< SVGAnimatedNumber >& dom_getBaseFrequencyY() const { return baseFrequencyY; }

		const Attribute< SVGAnimatedInteger >& dom_getNumOctaves() const { return numOctaves; }

		const Attribute< SVGAnimatedNumber >& dom_getSeed() const { return seed; }

		const Attribute< Animated<SVG_STITCHTYPE> >& dom_getStitchTiles() const { return stitchTiles; }

		const Attribute< Animated<SVG_TURBULENCE_TYPE> >& dom_getType() const { return type; }

	public:
		const SVGNumber & getBaseFrequencyX() const { return baseFrequencyX.getValue().getAnimatedVal().getValue(); }
		void setBaseFrequencyX(const SVGNumber& n)  { baseFrequencyX.getValue().getAnimatedVal().setValue(n); baseFrequencyX.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getBaseFrequencyY() const { return baseFrequencyY.getValue().getAnimatedVal().getValue(); }
		void setBaseFrequencyY(const SVGNumber& n)  { baseFrequencyY.getValue().getAnimatedVal().setValue(n); baseFrequencyY.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGInteger & getNumOctaves() const { return numOctaves.getValue().getAnimatedVal().getValue(); }
		void setNumOctaves(const SVGInteger& n)  { numOctaves.getValue().getAnimatedVal().setValue(n); numOctaves.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getSeed() const { return seed.getValue().getAnimatedVal().getValue(); }
		void setSeed(const SVGNumber& n)  { seed.getValue().getAnimatedVal().setValue(n); seed.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_STITCHTYPE & getStitchTiles() const { return stitchTiles.getValue().getAnimatedVal().getValue(); }
		void setStitchTiles(const SVG_STITCHTYPE& n)  { stitchTiles.getValue().getAnimatedVal().setValue(n); stitchTiles.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_TURBULENCE_TYPE & getType() const { return type.getValue().getAnimatedVal().getValue(); }
		void setType(const SVG_TURBULENCE_TYPE& n)  { type.getValue().getAnimatedVal().setValue(n); type.getValue().getBaseVal().setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFETurbulenceElement();
		virtual const String getDtdElement() const { return SVGFETurbulenceElement_element_string; }
		SVGFETurbulenceElement(dom::Document* doc) : SVGElement(doc, SVGFETurbulenceElement_element_string) {}
	};
}


#endif // __svg_SVGFETurbulenceElement__
