#ifndef __svg_SVGViewElement__
#define __svg_SVGViewElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGFitToViewBox.hpp>
#include <w3c/svg/SVGZoomAndPan.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGViewElement_element_string;
}

namespace svg {
	class SVGViewElement :
		public SVGElement,
		public SVGExternalResourcesRequired,
		public SVGFitToViewBox,
		public SVGZoomAndPan {
	public:
	protected:
		Attribute< SVGElement* > viewTarget;
	public:
		const Attribute< SVGElement* >& dom_getViewTarget() const { return viewTarget; }

	public:
		const SVGElement* getViewTarget() const { return viewTarget.getValue(); }
		void setViewTarget(SVGElement* n)  { viewTarget.setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGViewElement();
		virtual const String getDtdElement() const { return SVGViewElement_element_string; }
		SVGViewElement(dom::Document* doc) : SVGElement(doc, SVGViewElement_element_string) {}
	};
}


#endif // __svg_SVGViewElement__
