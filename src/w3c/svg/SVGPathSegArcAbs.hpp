#ifndef __svg_SVGPathSegArcAbs__
#define __svg_SVGPathSegArcAbs__

// generated by genFromIdl.py
	class BezierPath;

namespace svg {
}

namespace agg {
	class path_storage;
}

#include <w3c/svg/SVGPathSeg.hpp>
#include <w3c/svg/Attribute.hpp>

namespace svg {
	class SVGPathSegArcAbs :
		public SVGPathSeg {
	public:
	protected:
		Attribute< float > x;
		Attribute< float > y;
		Attribute< float > r1;
		Attribute< float > r2;
		Attribute< float > angle;
		Attribute< bool > largeArcFlag;
		Attribute< bool > sweepFlag;
	public:
		const Attribute< float >& dom_getX() const { return x; }
		Attribute< float >& dom_getX() { return x; }
		void dom_setX(const float& n)  { x.setValue(n); }

		const Attribute< float >& dom_getY() const { return y; }
		Attribute< float >& dom_getY() { return y; }
		void dom_setY(const float& n)  { y.setValue(n); }

		const Attribute< float >& dom_getR1() const { return r1; }
		Attribute< float >& dom_getR1() { return r1; }
		void dom_setR1(const float& n)  { r1.setValue(n); }

		const Attribute< float >& dom_getR2() const { return r2; }
		Attribute< float >& dom_getR2() { return r2; }
		void dom_setR2(const float& n)  { r2.setValue(n); }

		const Attribute< float >& dom_getAngle() const { return angle; }
		Attribute< float >& dom_getAngle() { return angle; }
		void dom_setAngle(const float& n)  { angle.setValue(n); }

		const Attribute< bool >& dom_getLargeArcFlag() const { return largeArcFlag; }
		Attribute< bool >& dom_getLargeArcFlag() { return largeArcFlag; }
		void dom_setLargeArcFlag(const bool& n)  { largeArcFlag.setValue(n); }

		const Attribute< bool >& dom_getSweepFlag() const { return sweepFlag; }
		Attribute< bool >& dom_getSweepFlag() { return sweepFlag; }
		void dom_setSweepFlag(const bool& n)  { sweepFlag.setValue(n); }

	public:
		const float & getX() const { return x.getValue(); }
		float & getX() { return x.getValue(); }
		void setX(const float& n)  { x.setValue(n); }

		const float & getY() const { return y.getValue(); }
		float & getY() { return y.getValue(); }
		void setY(const float& n)  { y.setValue(n); }

		const float & getR1() const { return r1.getValue(); }
		float & getR1() { return r1.getValue(); }
		void setR1(const float& n)  { r1.setValue(n); }

		const float & getR2() const { return r2.getValue(); }
		float & getR2() { return r2.getValue(); }
		void setR2(const float& n)  { r2.setValue(n); }

		const float & getAngle() const { return angle.getValue(); }
		float & getAngle() { return angle.getValue(); }
		void setAngle(const float& n)  { angle.setValue(n); }

		const bool & getLargeArcFlag() const { return largeArcFlag.getValue(); }
		bool & getLargeArcFlag() { return largeArcFlag.getValue(); }
		void setLargeArcFlag(const bool& n)  { largeArcFlag.setValue(n); }

		const bool & getSweepFlag() const { return sweepFlag.getValue(); }
		bool & getSweepFlag() { return sweepFlag.getValue(); }
		void setSweepFlag(const bool& n)  { sweepFlag.setValue(n); }


	public:
		SVGPathSegArcAbs() : SVGPathSeg(PATHSEG_ARC_ABS,'A') {}
		virtual ~SVGPathSegArcAbs() {}
		virtual void updateBezier(BezierPath&) const;
		virtual void updateBezier(agg::path_storage&) const;
	public:
	};
}


#endif // __svg_SVGPathSegArcAbs__
