#ifndef __svg_SVGComponentTransferFunctionElement__
#define __svg_SVGComponentTransferFunctionElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedNumberList.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGComponentTransferFunctionElement :
		public SVGElement {
	public:

		enum SVG_FECOMPONENTTRANSFER_TYPE {
			SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0,
			SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1,
			SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2,
			SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3,
			SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4,
			SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5
		};

	protected:
		Attribute< Animated<SVG_FECOMPONENTTRANSFER_TYPE> > type;
		Attribute< SVGAnimatedNumberList > tableValues;
		Attribute< SVGAnimatedNumber > slope;
		Attribute< SVGAnimatedNumber > intercept;
		Attribute< SVGAnimatedNumber > amplitude;
		Attribute< SVGAnimatedNumber > exponent;
		Attribute< SVGAnimatedNumber > offset;
	public:
		const Attribute< Animated<SVG_FECOMPONENTTRANSFER_TYPE> >& dom_getType() const { return type; }

		const Attribute< SVGAnimatedNumberList >& dom_getTableValues() const { return tableValues; }

		const Attribute< SVGAnimatedNumber >& dom_getSlope() const { return slope; }

		const Attribute< SVGAnimatedNumber >& dom_getIntercept() const { return intercept; }

		const Attribute< SVGAnimatedNumber >& dom_getAmplitude() const { return amplitude; }

		const Attribute< SVGAnimatedNumber >& dom_getExponent() const { return exponent; }

		const Attribute< SVGAnimatedNumber >& dom_getOffset() const { return offset; }

	public:
		const SVG_FECOMPONENTTRANSFER_TYPE & getType() const { return type.getValue().getAnimatedVal().getValue(); }
		void setType(const SVG_FECOMPONENTTRANSFER_TYPE& n)  { type.getValue().getAnimatedVal().setValue(n); type.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumberList & getTableValues() const { return tableValues.getValue().getAnimatedVal().getValue(); }
		void setTableValues(const SVGNumberList& n)  { tableValues.getValue().getAnimatedVal().setValue(n); tableValues.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getSlope() const { return slope.getValue().getAnimatedVal().getValue(); }
		void setSlope(const SVGNumber& n)  { slope.getValue().getAnimatedVal().setValue(n); slope.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getIntercept() const { return intercept.getValue().getAnimatedVal().getValue(); }
		void setIntercept(const SVGNumber& n)  { intercept.getValue().getAnimatedVal().setValue(n); intercept.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getAmplitude() const { return amplitude.getValue().getAnimatedVal().getValue(); }
		void setAmplitude(const SVGNumber& n)  { amplitude.getValue().getAnimatedVal().setValue(n); amplitude.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getExponent() const { return exponent.getValue().getAnimatedVal().getValue(); }
		void setExponent(const SVGNumber& n)  { exponent.getValue().getAnimatedVal().setValue(n); exponent.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getOffset() const { return offset.getValue().getAnimatedVal().getValue(); }
		void setOffset(const SVGNumber& n)  { offset.getValue().getAnimatedVal().setValue(n); offset.getValue().getBaseVal().setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGComponentTransferFunctionElement();
		SVGComponentTransferFunctionElement(dom::Document* doc, unicode::String* tagName) : SVGElement(doc, tagName) {}
	};
}


#endif // __svg_SVGComponentTransferFunctionElement__
