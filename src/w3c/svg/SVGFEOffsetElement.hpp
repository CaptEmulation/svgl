#ifndef __svg_SVGFEOffsetElement__
#define __svg_SVGFEOffsetElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class FilterContext;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGFilterPrimitiveStandardAttributes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFEOffsetElement_element_string;
}

namespace svg {
	class SVGFEOffsetElement :
		public SVGElement,
		public SVGFilterPrimitiveStandardAttributes {
	public:
	protected:
		Attribute< SVGAnimatedString > in1;
		Attribute< SVGAnimatedLength > dx;
		Attribute< SVGAnimatedLength > dy;
	public:
		const Attribute< SVGAnimatedString >& dom_getIn1() const { return in1; }

		const Attribute< SVGAnimatedLength >& dom_getDx() const { return dx; }

		const Attribute< SVGAnimatedLength >& dom_getDy() const { return dy; }

	public:
		const SVGString & getIn1() const { return in1.getValue().getAnimatedVal().getValue(); }
		void setIn1(const SVGString& n)  { in1.getValue().getAnimatedVal().setValue(n); in1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getDx() const { return dx.getValue().getAnimatedVal().getValue(); }
		void setDx(const SVGLength& n)  { dx.getValue().getAnimatedVal().setValue(n); dx.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getDy() const { return dy.getValue().getAnimatedVal().getValue(); }
		void setDy(const SVGLength& n)  { dy.getValue().getAnimatedVal().setValue(n); dy.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual unicode::String* getOptionalIn1();
		virtual unicode::String* getOptionalIn2();
		virtual unicode::String* getOptionalResult();

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFEOffsetElement();
		virtual const String getDtdElement() const { return SVGFEOffsetElement_element_string; }
		SVGFEOffsetElement(dom::Document* doc) : SVGElement(doc, SVGFEOffsetElement_element_string) {}
	};
}


#endif // __svg_SVGFEOffsetElement__
