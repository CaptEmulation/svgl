#ifndef __svg_SVGLangSpace__
#define __svg_SVGLangSpace__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGLangSpace {
	public:

		enum SVG_XML_SPACE {
			SVG_XML_SPACE_UNKNOWN = 0,
			SVG_XML_SPACE_DEFAULT = 1,
			SVG_XML_SPACE_PRESERVE = 2
		};

	protected:
		Attribute< DOMString > xmllang;
		Attribute< SVG_XML_SPACE > xmlspace;
	public:
		const Attribute< DOMString >& dom_getXmllang() const { return xmllang; }
		Attribute< DOMString >& dom_getXmllang() { return xmllang; }
		void dom_setXmllang(const DOMString& n)  { xmllang.setValue(n); }

		const Attribute< SVG_XML_SPACE >& dom_getXmlspace() const { return xmlspace; }
		Attribute< SVG_XML_SPACE >& dom_getXmlspace() { return xmlspace; }
		void dom_setXmlspace(const SVG_XML_SPACE& n)  { xmlspace.setValue(n); }

	public:
		const DOMString & getXmllang() const { return xmllang.getValue(); }
		DOMString & getXmllang() { return xmllang.getValue(); }
		void setXmllang(const DOMString& n)  { xmllang.setValue(n); }

		const SVG_XML_SPACE & getXmlspace() const { return xmlspace.getValue(); }
		SVG_XML_SPACE & getXmlspace() { return xmlspace.getValue(); }
		void setXmlspace(const SVG_XML_SPACE& n)  { xmlspace.setValue(n); }


	public:
		virtual ~SVGLangSpace() {}
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGLangSpace__
