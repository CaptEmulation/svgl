#ifndef __svg_SVGFESpotLightElement__
#define __svg_SVGFESpotLightElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFESpotLightElement_element_string;
}

namespace svg {
	class SVGFESpotLightElement :
		public SVGElement {
	public:
	protected:
		Attribute< SVGAnimatedNumber > x;
		Attribute< SVGAnimatedNumber > y;
		Attribute< SVGAnimatedNumber > z;
		Attribute< SVGAnimatedNumber > pointsAtX;
		Attribute< SVGAnimatedNumber > pointsAtY;
		Attribute< SVGAnimatedNumber > pointsAtZ;
		Attribute< SVGAnimatedNumber > specularExponent;
		Attribute< SVGAnimatedNumber > limitingConeAngle;
	public:
		const Attribute< SVGAnimatedNumber >& dom_getX() const { return x; }

		const Attribute< SVGAnimatedNumber >& dom_getY() const { return y; }

		const Attribute< SVGAnimatedNumber >& dom_getZ() const { return z; }

		const Attribute< SVGAnimatedNumber >& dom_getPointsAtX() const { return pointsAtX; }

		const Attribute< SVGAnimatedNumber >& dom_getPointsAtY() const { return pointsAtY; }

		const Attribute< SVGAnimatedNumber >& dom_getPointsAtZ() const { return pointsAtZ; }

		const Attribute< SVGAnimatedNumber >& dom_getSpecularExponent() const { return specularExponent; }

		const Attribute< SVGAnimatedNumber >& dom_getLimitingConeAngle() const { return limitingConeAngle; }

	public:
		const SVGNumber & getX() const { return x.getValue().getAnimatedVal().getValue(); }
		void setX(const SVGNumber& n)  { x.getValue().getAnimatedVal().setValue(n); x.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getY() const { return y.getValue().getAnimatedVal().getValue(); }
		void setY(const SVGNumber& n)  { y.getValue().getAnimatedVal().setValue(n); y.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getZ() const { return z.getValue().getAnimatedVal().getValue(); }
		void setZ(const SVGNumber& n)  { z.getValue().getAnimatedVal().setValue(n); z.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getPointsAtX() const { return pointsAtX.getValue().getAnimatedVal().getValue(); }
		void setPointsAtX(const SVGNumber& n)  { pointsAtX.getValue().getAnimatedVal().setValue(n); pointsAtX.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getPointsAtY() const { return pointsAtY.getValue().getAnimatedVal().getValue(); }
		void setPointsAtY(const SVGNumber& n)  { pointsAtY.getValue().getAnimatedVal().setValue(n); pointsAtY.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getPointsAtZ() const { return pointsAtZ.getValue().getAnimatedVal().getValue(); }
		void setPointsAtZ(const SVGNumber& n)  { pointsAtZ.getValue().getAnimatedVal().setValue(n); pointsAtZ.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getSpecularExponent() const { return specularExponent.getValue().getAnimatedVal().getValue(); }
		void setSpecularExponent(const SVGNumber& n)  { specularExponent.getValue().getAnimatedVal().setValue(n); specularExponent.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getLimitingConeAngle() const { return limitingConeAngle.getValue().getAnimatedVal().getValue(); }
		void setLimitingConeAngle(const SVGNumber& n)  { limitingConeAngle.getValue().getAnimatedVal().setValue(n); limitingConeAngle.getValue().getBaseVal().setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFESpotLightElement();
		virtual const String getDtdElement() const { return SVGFESpotLightElement_element_string; }
		SVGFESpotLightElement(dom::Document* doc) : SVGElement(doc, SVGFESpotLightElement_element_string) {}
	};
}


#endif // __svg_SVGFESpotLightElement__
