#ifndef __svg_SVGAElement__
#define __svg_SVGAElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGURIReference.hpp>
#include <w3c/svg/SVGTests.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/SVGTransformable.hpp>
#include <w3c/events/EventTarget.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGAElement_element_string;
}

namespace svg {
	class SVGAElement :
		public SVGElement,
		public SVGURIReference,
		public SVGTests,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public SVGTransformable,
		public events::EventTarget {
	public:

		enum SVG_XLINK_SHOW {
			SVG_XLINK_SHOW_UNKNOWN = 0,
			SVG_XLINK_SHOW_NEW = 1,
			SVG_XLINK_SHOW_REPLACE = 2
		};

	protected:
		Attribute< SVGAnimatedString > target;
		Attribute< SVG_XLINK_SHOW > xlinkShow;
	public:
		const Attribute< SVGAnimatedString >& dom_getTarget() const { return target; }

		const Attribute< SVG_XLINK_SHOW >& dom_getXlinkShow() const { return xlinkShow; }
		Attribute< SVG_XLINK_SHOW >& dom_getXlinkShow() { return xlinkShow; }
		void dom_setXlinkShow(const SVG_XLINK_SHOW& n)  { xlinkShow.setValue(n); }

	public:
		const SVGString & getTarget() const { return target.getValue().getAnimatedVal().getValue(); }
		void setTarget(const SVGString& n)  { target.getValue().getAnimatedVal().setValue(n); target.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_XLINK_SHOW & getXlinkShow() const { return xlinkShow.getValue(); }
		SVG_XLINK_SHOW & getXlinkShow() { return xlinkShow.getValue(); }
		void setXlinkShow(const SVG_XLINK_SHOW& n)  { xlinkShow.setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGAElement();
		virtual const String getDtdElement() const { return SVGAElement_element_string; }
		SVGAElement(dom::Document* doc) : SVGElement(doc, SVGAElement_element_string) {}
	};
}


#endif // __svg_SVGAElement__
