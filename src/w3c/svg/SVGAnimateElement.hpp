#ifndef __svg_SVGAnimateElement__
#define __svg_SVGAnimateElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
	class AnimationInfo;
}

#include <w3c/svg/SVGAnimationElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGLengthList.hpp>
#include <w3c/svg/String.hpp>
#include <svgl/KeyFrame.hpp>
#include <vector>
#include <svgl/AnimationManager.hpp>

namespace svg {
            extern unicode::String * SVGAnimateElement_element_string;
}

namespace svg {
	class SVGAnimateElement :
		public SVGAnimationElement {
	public:
	protected:
		Attribute< SVGLengthList > values;
	public:
		const Attribute< SVGLengthList >& dom_getValues() const { return values; }

	public:
		const SVGLengthList & getValues() const { return values.getValue(); }
		void setValues(const SVGLengthList& n)  { values.setValue(n);  setDamaged(true); }


	protected:
		svgl::AnimateAdapter* _attributeToAnimate;
		typedef svgl::KeyFrame<float> KeyFrame;
		typedef std::vector<KeyFrame> KeyFrames;
		KeyFrames _keyFrames;

	public:
		virtual void animationTraverse(svgl::AnimationInfo*)  ;

	public:
		virtual void tick(svgl::Animation::TickInfo*);
		virtual void reset();
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGAnimateElement();
		virtual const String getDtdElement() const { return SVGAnimateElement_element_string; }
		SVGAnimateElement(dom::Document* doc) : SVGAnimationElement(doc, SVGAnimateElement_element_string) {}
	};
}


#endif // __svg_SVGAnimateElement__
