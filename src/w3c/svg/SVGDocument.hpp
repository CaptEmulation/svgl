#ifndef __svg_SVGDocument__
#define __svg_SVGDocument__

// generated by genFromIdl.py
	class DOM_Node;
	class xmlostream;

namespace svg {
	class SVGSVGElement;
	class SVGElement;
}

#include <w3c/svg/Document.hpp>
#include <w3c/events/DocumentEvent.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>

namespace svg {
	class SVGDocument :
		public Document,
		public events::DocumentEvent {
	public:
	protected:
		Attribute< DOMString > title;
		Attribute< DOMString > referrer;
		Attribute< DOMString > domain;
		Attribute< DOMString > URL;
		Attribute< SVGSVGElement* > rootElement;
	public:
		const Attribute< DOMString >& dom_getTitle() const { return title; }

		const Attribute< DOMString >& dom_getReferrer() const { return referrer; }

		const Attribute< DOMString >& dom_getDomain() const { return domain; }

		const Attribute< DOMString >& dom_getURL() const { return URL; }

		const Attribute< SVGSVGElement* >& dom_getRootElement() const { return rootElement; }

	public:
		const DOMString & getTitle() const { return title.getValue(); }
		void setTitle(const DOMString& n)  { title.setValue(n); }

		const DOMString & getReferrer() const { return referrer.getValue(); }
		void setReferrer(const DOMString& n)  { referrer.setValue(n); }

		const DOMString & getDomain() const { return domain.getValue(); }
		void setDomain(const DOMString& n)  { domain.setValue(n); }

		const DOMString & getURL() const { return URL.getValue(); }
		void setURL(const DOMString& n)  { URL.setValue(n); }

		const SVGSVGElement* getRootElement() const { return rootElement.getValue(); }
		void setRootElement(SVGSVGElement* n)  { rootElement.setValue(n); }


	public:
		SVGDocument();
		dom::Element * createElement(unicode::String * tagName) throw(dom::DOMException);
		dom::Attr * createAttribute(unicode::String * name) throw(dom::DOMException);
		dom::Element * createElementNS(unicode::String * namespaceURI, unicode::String * qualifiedName) throw(dom::DOMException);
		dom::Attr * createAttributeNS(unicode::String * namespaceURI, unicode::String * qualifiedName) throw(dom::DOMException);
		dom::AttributeMap * createAttributeMap(dom::Element * e, dom::NamedNodeMapImpl* defaults);
		dom::Node * cloneNode(bool deep) const;
		dom::Node * insertBefore(dom::Node * newChild, dom::Node * refChild) throw(dom::DOMException);
		dom::Node * removeChild(dom::Node * oldChild) throw(dom::DOMException);
		dom::Node * replaceChild(dom::Node * newChild, dom::Node * oldChild) throw(dom::DOMException);


		virtual void print(xmlostream&);
		void updateStyle();
	public:
	};
}


#endif // __svg_SVGDocument__
