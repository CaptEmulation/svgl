#ifndef __svg_SVGZoomAndPan__
#define __svg_SVGZoomAndPan__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGZoomAndPan {
	public:

		enum SVG_ZOOMANDPAN {
			SVG_ZOOMANDPAN_UNKNOWN = 0,
			SVG_ZOOMANDPAN_DISABLE = 1,
			SVG_ZOOMANDPAN_MAGNIFY = 2,
			SVG_ZOOMANDPAN_ZOOM = 3
		};

	protected:
		Attribute< SVG_ZOOMANDPAN > zoomAndPan;
	public:
		const Attribute< SVG_ZOOMANDPAN >& dom_getZoomAndPan() const { return zoomAndPan; }
		Attribute< SVG_ZOOMANDPAN >& dom_getZoomAndPan() { return zoomAndPan; }
		void dom_setZoomAndPan(const SVG_ZOOMANDPAN& n)  { zoomAndPan.setValue(n); }

	public:
		const SVG_ZOOMANDPAN & getZoomAndPan() const { return zoomAndPan.getValue(); }
		SVG_ZOOMANDPAN & getZoomAndPan() { return zoomAndPan.getValue(); }
		void setZoomAndPan(const SVG_ZOOMANDPAN& n)  { zoomAndPan.setValue(n); }


	public:
		virtual ~SVGZoomAndPan() {}
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGZoomAndPan__
