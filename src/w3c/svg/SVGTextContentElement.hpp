#ifndef __svg_SVGTextContentElement__
#define __svg_SVGTextContentElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGPoint;
	class SVGRect;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class TextInfo;
}

namespace dom {
	class Text;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGTests.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/events/EventTarget.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/String.hpp>
#include <glft/FontManager.hpp>

namespace svg {
	class SVGTextContentElement :
		public SVGElement,
		public SVGTests,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public events::EventTarget {
	public:

		enum LENGTHADJUST {
			LENGTHADJUST_UNKNOWN = 0,
			LENGTHADJUST_SPACING = 1,
			LENGTHADJUST_SPACINGANDGLYPHS = 2
		};

	protected:
		Attribute< SVGAnimatedLength > textLength;
		Attribute< Animated<LENGTHADJUST> > lengthAdjust;
	public:
		const Attribute< SVGAnimatedLength >& dom_getTextLength() const { return textLength; }

		const Attribute< Animated<LENGTHADJUST> >& dom_getLengthAdjust() const { return lengthAdjust; }

	public:
		const SVGLength & getTextLength() const { return textLength.getValue().getAnimatedVal().getValue(); }
		void setTextLength(const SVGLength& n)  { textLength.getValue().getAnimatedVal().setValue(n); textLength.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const LENGTHADJUST & getLengthAdjust() const { return lengthAdjust.getValue().getAnimatedVal().getValue(); }
		void setLengthAdjust(const LENGTHADJUST& n)  { lengthAdjust.getValue().getAnimatedVal().setValue(n); lengthAdjust.getValue().getBaseVal().setValue(n);  setDamaged(true); }


	protected:
dom::Text * _currentPCDATA;
SVGTextContentElement * _currentTextContent;
svgl::TextInfo * _textinfo;


	void setFont(svgl::Context * svglContext, svgl::GLInfo* glinfo, svgl::TextInfo* textinfo, glft::FontManager::font_type t);
	void setFont(svgl::Context * svglContext, svgl::GLInfo* glinfo, svgl::TextInfo*);
	virtual void computeGeometryForDrawing(svgl::Context * svglContext, svgl::GLInfo* glinfo);


    public:
		virtual void glTextTraverse(svgl::Context*, svgl::GLInfo*, svgl::TextInfo*) =0;
		virtual void glTextTraversePCDATA(svgl::Context*, svgl::GLInfo*, svgl::TextInfo*, dom::Text*) =0;

	public:
		virtual long getNumberOfChars (  ) ;
		virtual float getComputedTextLength (  ) ;
		virtual float getSubStringLength ( unsigned long charnum, unsigned long nchars ) ;
		virtual SVGPoint* getStartPositionOfChar ( unsigned long charnum ) ;
		virtual SVGPoint* getEndPositionOfChar ( unsigned long charnum ) ;
		virtual SVGRect* getExtentOfChar ( unsigned long charnum ) ;
		virtual float getRotationOfChar ( unsigned long charnum ) ;
		virtual long getCharNumAtPosition ( const SVGPoint& point ) ;
		virtual void selectSubString ( unsigned long charnum, unsigned long nchars ) ;
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGTextContentElement();
		SVGTextContentElement(dom::Document* doc, unicode::String* tagName) : SVGElement(doc, tagName) {}
	};
}


#endif // __svg_SVGTextContentElement__
