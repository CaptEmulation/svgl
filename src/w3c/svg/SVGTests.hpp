#ifndef __svg_SVGTests__
#define __svg_SVGTests__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGStringList.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGTests {
	public:
	protected:
		Attribute< SVGStringList > requiredFeatures;
		Attribute< SVGStringList > requiredExtensions;
		Attribute< SVGStringList > systemLanguage;
	public:
		const Attribute< SVGStringList >& dom_getRequiredFeatures() const { return requiredFeatures; }

		const Attribute< SVGStringList >& dom_getRequiredExtensions() const { return requiredExtensions; }

		const Attribute< SVGStringList >& dom_getSystemLanguage() const { return systemLanguage; }

	public:
		const SVGStringList & getRequiredFeatures() const { return requiredFeatures.getValue(); }
		void setRequiredFeatures(const SVGStringList& n)  { requiredFeatures.setValue(n); }

		const SVGStringList & getRequiredExtensions() const { return requiredExtensions.getValue(); }
		void setRequiredExtensions(const SVGStringList& n)  { requiredExtensions.setValue(n); }

		const SVGStringList & getSystemLanguage() const { return systemLanguage.getValue(); }
		void setSystemLanguage(const SVGStringList& n)  { systemLanguage.setValue(n); }


	public:
		virtual ~SVGTests() {}
	public:
		virtual bool hasExtension ( const DOMString& extension ) ;
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGTests__
