#ifndef __svg_SVGColor__
#define __svg_SVGColor__

// generated by genFromIdl.py

namespace svg {
}

#include <w3c/css/CSSValue.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/css/RGBColor.hpp>
#include <w3c/svg/SVGICCColor.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/DOMString.hpp>

namespace svg {
	class SVGColor :
		public css::CSSValue {
	public:

		enum SVG_COLORTYPE {
			SVG_COLORTYPE_UNKNOWN = 0,
			SVG_COLORTYPE_RGBCOLOR = 1,
			SVG_COLORTYPE_RGBCOLOR_ICCCOLOR = 2
		};

	protected:
		Attribute< SVG_COLORTYPE > colorType;
		Attribute< css::RGBColor > rgbColor;
		Attribute< SVGICCColor > iccColor;
	public:
		const Attribute< SVG_COLORTYPE >& dom_getColorType() const { return colorType; }

		const Attribute< css::RGBColor >& dom_getRgbColor() const { return rgbColor; }

		const Attribute< SVGICCColor >& dom_getIccColor() const { return iccColor; }

	public:
		const SVG_COLORTYPE & getColorType() const { return colorType.getValue(); }
		void setColorType(const SVG_COLORTYPE& n)  { colorType.setValue(n); }

		const css::RGBColor & getRgbColor() const { return rgbColor.getValue(); }
		void setRgbColor(const css::RGBColor& n)  { rgbColor.setValue(n); }

		const SVGICCColor & getIccColor() const { return iccColor.getValue(); }
		void setIccColor(const SVGICCColor& n)  { iccColor.setValue(n); }

	public:
		virtual void setRGBColor ( const DOMString& rgbColor ) ;
		virtual void setRGBColorICCColor ( const DOMString& rgbColor, const DOMString& iccColor ) ;

	public:
		virtual ~SVGColor();
	};
}


#endif // __svg_SVGColor__
