#ifndef __svg_SVGViewSpec__
#define __svg_SVGViewSpec__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGZoomAndPan.hpp>
#include <w3c/svg/SVGFitToViewBox.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGTransformList.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGViewSpec :
		public SVGZoomAndPan,
		public SVGFitToViewBox {
	public:
	protected:
		Attribute< SVGTransformList > transform;
		Attribute< SVGElement* > viewTarget;
		Attribute< DOMString > viewBoxString;
		Attribute< DOMString > preserveAspectRatioString;
		Attribute< DOMString > transformString;
		Attribute< DOMString > viewTargetString;
	public:
		const Attribute< SVGTransformList >& dom_getTransform() const { return transform; }

		const Attribute< SVGElement* >& dom_getViewTarget() const { return viewTarget; }

		const Attribute< DOMString >& dom_getViewBoxString() const { return viewBoxString; }

		const Attribute< DOMString >& dom_getPreserveAspectRatioString() const { return preserveAspectRatioString; }

		const Attribute< DOMString >& dom_getTransformString() const { return transformString; }

		const Attribute< DOMString >& dom_getViewTargetString() const { return viewTargetString; }

	public:
		const SVGTransformList & getTransform() const { return transform.getValue(); }
		void setTransform(const SVGTransformList& n)  { transform.setValue(n); }

		const SVGElement* getViewTarget() const { return viewTarget.getValue(); }
		void setViewTarget(SVGElement* n)  { viewTarget.setValue(n); }

		const DOMString & getViewBoxString() const { return viewBoxString.getValue(); }
		void setViewBoxString(const DOMString& n)  { viewBoxString.setValue(n); }

		const DOMString & getPreserveAspectRatioString() const { return preserveAspectRatioString.getValue(); }
		void setPreserveAspectRatioString(const DOMString& n)  { preserveAspectRatioString.setValue(n); }

		const DOMString & getTransformString() const { return transformString.getValue(); }
		void setTransformString(const DOMString& n)  { transformString.setValue(n); }

		const DOMString & getViewTargetString() const { return viewTargetString.getValue(); }
		void setViewTargetString(const DOMString& n)  { viewTargetString.setValue(n); }


	public:
		virtual ~SVGViewSpec() {}
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGViewSpec__
