#ifndef __svg_SVGFEBlendElement__
#define __svg_SVGFEBlendElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class FilterContext;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGFilterPrimitiveStandardAttributes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFEBlendElement_element_string;
}

namespace svg {
	class SVGFEBlendElement :
		public SVGElement,
		public SVGFilterPrimitiveStandardAttributes {
	public:

		enum SVG_FEBLEND_MODE {
			SVG_FEBLEND_MODE_UNKNOWN = 0,
			SVG_FEBLEND_MODE_NORMAL = 1,
			SVG_FEBLEND_MODE_MULTIPLY = 2,
			SVG_FEBLEND_MODE_SCREEN = 3,
			SVG_FEBLEND_MODE_DARKEN = 4,
			SVG_FEBLEND_MODE_LIGHTEN = 5
		};

	protected:
		Attribute< SVGAnimatedString > in1;
		Attribute< SVGAnimatedString > in2;
		Attribute< Animated<SVG_FEBLEND_MODE> > mode;
	public:
		const Attribute< SVGAnimatedString >& dom_getIn1() const { return in1; }

		const Attribute< SVGAnimatedString >& dom_getIn2() const { return in2; }

		const Attribute< Animated<SVG_FEBLEND_MODE> >& dom_getMode() const { return mode; }

	public:
		const SVGString & getIn1() const { return in1.getValue().getAnimatedVal().getValue(); }
		void setIn1(const SVGString& n)  { in1.getValue().getAnimatedVal().setValue(n); in1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGString & getIn2() const { return in2.getValue().getAnimatedVal().getValue(); }
		void setIn2(const SVGString& n)  { in2.getValue().getAnimatedVal().setValue(n); in2.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_FEBLEND_MODE & getMode() const { return mode.getValue().getAnimatedVal().getValue(); }
		void setMode(const SVG_FEBLEND_MODE& n)  { mode.getValue().getAnimatedVal().setValue(n); mode.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual unicode::String* getOptionalIn1();
		virtual unicode::String* getOptionalIn2();
		virtual unicode::String* getOptionalResult();

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFEBlendElement();
		virtual const String getDtdElement() const { return SVGFEBlendElement_element_string; }
		SVGFEBlendElement(dom::Document* doc) : SVGElement(doc, SVGFEBlendElement_element_string) {}
	};
}


#endif // __svg_SVGFEBlendElement__
