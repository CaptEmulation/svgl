#ifndef __svg_SVGAnimateTransformElement__
#define __svg_SVGAnimateTransformElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGTranslateTransform;
	class SVGRotateTransform;
	class SVGScaleTransform;
	class SVGSkewXTransform;
	class SVGSkewYTransform;
}

namespace svgl {
	class AnimateAdapter;
	class BezierPathDistanceIterator;
	class AnimationInfo;
}

#include <w3c/svg/SVGAnimationElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>
#include <svgl/AnimationManager.hpp>
#include <svgl/KeyFrame.hpp>
#include <utility>
#include <vector>

namespace svg {
            extern unicode::String * SVGAnimateTransformElement_element_string;
}

namespace svg {
	class SVGAnimateTransformElement :
		public SVGAnimationElement {
	public:

		enum SVG_ANIMATETRANSFORM_TYPE {
			SVG_ANIMATETRANSFORM_TYPE_UNKNOWN = 0,
			SVG_ANIMATETRANSFORM_TYPE_TRANSLATE = 1,
			SVG_ANIMATETRANSFORM_TYPE_SCALE = 2,
			SVG_ANIMATETRANSFORM_TYPE_ROTATE = 3,
			SVG_ANIMATETRANSFORM_TYPE_SKEWX = 4,
			SVG_ANIMATETRANSFORM_TYPE_SKEWY = 5
		};

	protected:
		Attribute< DOMString > values;
		Attribute< SVG_ANIMATETRANSFORM_TYPE > type;
	public:
		const Attribute< DOMString >& dom_getValues() const { return values; }

		const Attribute< SVG_ANIMATETRANSFORM_TYPE >& dom_getType() const { return type; }

	public:
		const DOMString & getValues() const { return values.getValue(); }
		void setValues(const DOMString& n)  { values.setValue(n);  setDamaged(true); }

		const SVG_ANIMATETRANSFORM_TYPE & getType() const { return type.getValue(); }
		void setType(const SVG_ANIMATETRANSFORM_TYPE& n)  { type.setValue(n);  setDamaged(true); }


	public:
          struct KeyFrameValueType { float first, second, third; };
	  typedef svgl::KeyFrame< KeyFrameValueType > KeyFrame;
	  typedef std::vector<KeyFrame> KeyFrames;
	protected:
	  KeyFrames _keyFrames;
	  SVGTranslateTransform* _translateToAnimate;
          SVGRotateTransform* _rotateToAnimate;
	  SVGScaleTransform* _scaleToAnimate;
	  SVGSkewXTransform* _skewXToAnimate;
	  SVGSkewYTransform* _skewYToAnimate;

	public:
		virtual void animationTraverse(svgl::AnimationInfo*)  ;

	public:
		virtual void tick(svgl::Animation::TickInfo*);
		virtual void reset();
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGAnimateTransformElement();
		virtual const String getDtdElement() const { return SVGAnimateTransformElement_element_string; }
		SVGAnimateTransformElement(dom::Document* doc) : SVGAnimationElement(doc, SVGAnimateTransformElement_element_string) {}
	};
}


#endif // __svg_SVGAnimateTransformElement__
