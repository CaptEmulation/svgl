#ifndef __svg_SVGFitToViewBox__
#define __svg_SVGFitToViewBox__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedRect.hpp>
#include <w3c/svg/SVGAnimatedPreserveAspectRatio.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
	class SVGFitToViewBox {
	public:
	protected:
		Attribute< SVGAnimatedRect > viewBox;
		Attribute< SVGAnimatedPreserveAspectRatio > preserveAspectRatio;
	public:
		const Attribute< SVGAnimatedRect >& dom_getViewBox() const { return viewBox; }

		const Attribute< SVGAnimatedPreserveAspectRatio >& dom_getPreserveAspectRatio() const { return preserveAspectRatio; }

	public:
		const SVGRect & getViewBox() const { return viewBox.getValue().getAnimatedVal().getValue(); }
		void setViewBox(const SVGRect& n)  { viewBox.getValue().getAnimatedVal().setValue(n); viewBox.getValue().getBaseVal().setValue(n); }

		const SVGPreserveAspectRatio & getPreserveAspectRatio() const { return preserveAspectRatio.getValue().getAnimatedVal().getValue(); }
		void setPreserveAspectRatio(const SVGPreserveAspectRatio& n)  { preserveAspectRatio.getValue().getAnimatedVal().setValue(n); preserveAspectRatio.getValue().getBaseVal().setValue(n); }


	public:
		virtual ~SVGFitToViewBox() {}
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGFitToViewBox__
