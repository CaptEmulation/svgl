#ifndef __svg_SVGPathElement__
#define __svg_SVGPathElement__

// generated by genFromIdl.py
	class xmlostream;
	class BezierPath;

namespace svg {
	class SVGPoint;
	class SVGPathSegClosePath;
	class SVGPathSegMovetoAbs;
	class SVGPathSegMovetoRel;
	class SVGPathSegLinetoAbs;
	class SVGPathSegLinetoRel;
	class SVGPathSegCurvetoCubicAbs;
	class SVGPathSegCurvetoCubicRel;
	class SVGPathSegCurvetoQuadraticAbs;
	class SVGPathSegCurvetoQuadraticRel;
	class SVGPathSegArcAbs;
	class SVGPathSegArcRel;
	class SVGPathSegLinetoHorizontalAbs;
	class SVGPathSegLinetoHorizontalRel;
	class SVGPathSegLinetoVerticalAbs;
	class SVGPathSegLinetoVerticalRel;
	class SVGPathSegCurvetoCubicSmoothAbs;
	class SVGPathSegCurvetoCubicSmoothRel;
	class SVGPathSegCurvetoQuadraticSmoothAbs;
	class SVGPathSegCurvetoQuadraticSmoothRel;
}

namespace agg {
	class path_storage;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGTests.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/SVGTransformable.hpp>
#include <w3c/events/EventTarget.hpp>
#include <w3c/svg/SVGAnimatedPathData.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGPathElement_element_string;
}

namespace svg {
	class SVGPathElement :
		public SVGElement,
		public SVGTests,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public SVGTransformable,
		public events::EventTarget,
		public SVGAnimatedPathData {
	public:
	protected:
		Attribute< SVGAnimatedNumber > pathLength;
	public:
		const Attribute< SVGAnimatedNumber >& dom_getPathLength() const { return pathLength; }

	public:
		const SVGNumber & getPathLength() const { return pathLength.getValue().getAnimatedVal().getValue(); }
		void setPathLength(const SVGNumber& n)  { pathLength.getValue().getAnimatedVal().setValue(n); pathLength.getValue().getBaseVal().setValue(n);  setDamaged(true); }


	protected:
		BezierPath * _bezier;
		int _glFillList;
		int _glStrokeList;
	public:
		SVGPathElement(dom::Document *);

		virtual void glTraverse(svgl::Context*, svgl::GLInfo*)  ;

		virtual void pickTraverse(svgl::Context*, svgl::GLInfo*)  ;

	  virtual void getBoundingBox(svgl::Context* svglContext, svgl::GLInfo* glinfo, float*, float*, float*, float*) ;
	  //virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo) ;
	  //virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw) ;
          virtual void glTraverseBoundingBox(svgl::Context * svglContext, svgl::GLInfo* glinfo) ;
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, BezierPath*);
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, agg::path_storage*);
	public:
		virtual float getTotalLength (  ) ;
		virtual SVGPoint* getPointAtLength ( float distance ) ;
		virtual unsigned long getPathSegAtLength ( float distance ) ;
		virtual SVGPathSegClosePath* createSVGPathSegClosePath (  ) ;
		virtual SVGPathSegMovetoAbs* createSVGPathSegMovetoAbs ( float x, float y ) ;
		virtual SVGPathSegMovetoRel* createSVGPathSegMovetoRel ( float x, float y ) ;
		virtual SVGPathSegLinetoAbs* createSVGPathSegLinetoAbs ( float x, float y ) ;
		virtual SVGPathSegLinetoRel* createSVGPathSegLinetoRel ( float x, float y ) ;
		virtual SVGPathSegCurvetoCubicAbs* createSVGPathSegCurvetoCubicAbs ( float x, float y, float x1, float y1, float x2, float y2 ) ;
		virtual SVGPathSegCurvetoCubicRel* createSVGPathSegCurvetoCubicRel ( float x, float y, float x1, float y1, float x2, float y2 ) ;
		virtual SVGPathSegCurvetoQuadraticAbs* createSVGPathSegCurvetoQuadraticAbs ( float x, float y, float x1, float y1 ) ;
		virtual SVGPathSegCurvetoQuadraticRel* createSVGPathSegCurvetoQuadraticRel ( float x, float y, float x1, float y1 ) ;
		virtual SVGPathSegArcAbs* createSVGPathSegArcAbs ( float x, float y, float r1, float r2, float angle, bool largeArcFlag, bool sweepFlag ) ;
		virtual SVGPathSegArcRel* createSVGPathSegArcRel ( float x, float y, float r1, float r2, float angle, bool largeArcFlag, bool sweepFlag ) ;
		virtual SVGPathSegLinetoHorizontalAbs* createSVGPathSegLinetoHorizontalAbs ( float x ) ;
		virtual SVGPathSegLinetoHorizontalRel* createSVGPathSegLinetoHorizontalRel ( float x ) ;
		virtual SVGPathSegLinetoVerticalAbs* createSVGPathSegLinetoVerticalAbs ( float y ) ;
		virtual SVGPathSegLinetoVerticalRel* createSVGPathSegLinetoVerticalRel ( float y ) ;
		virtual SVGPathSegCurvetoCubicSmoothAbs* createSVGPathSegCurvetoCubicSmoothAbs ( float x, float y, float x2, float y2 ) ;
		virtual SVGPathSegCurvetoCubicSmoothRel* createSVGPathSegCurvetoCubicSmoothRel ( float x, float y, float x2, float y2 ) ;
		virtual SVGPathSegCurvetoQuadraticSmoothAbs* createSVGPathSegCurvetoQuadraticSmoothAbs ( float x, float y ) ;
		virtual SVGPathSegCurvetoQuadraticSmoothRel* createSVGPathSegCurvetoQuadraticSmoothRel ( float x, float y ) ;
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGPathElement();
		virtual const String getDtdElement() const { return SVGPathElement_element_string; }
	};
}


#endif // __svg_SVGPathElement__
