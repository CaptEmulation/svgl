#ifndef __svg_SVGTransformable__
#define __svg_SVGTransformable__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGAnimateMotionElement;
	class SVGAnimateTransformElement;
	class SVGTranslateTransform;
	class SVGScaleTransform;
	class SVGRotateTransform;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
}

#include <w3c/svg/SVGLocatable.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedTransformList.hpp>
#include <w3c/svg/String.hpp>
#include <iosfwd>

namespace svg {
	class SVGTransformable :
		public SVGLocatable {
	public:
	protected:
		Attribute< SVGAnimatedTransformList > transform;
	public:
		const Attribute< SVGAnimatedTransformList >& dom_getTransform() const { return transform; }

	public:
		const SVGTransformList & getTransform() const { return transform.getValue().getAnimatedVal().getValue(); }
		void setTransform(const SVGTransformList& n)  { transform.getValue().getAnimatedVal().setValue(n); transform.getValue().getBaseVal().setValue(n); }


		friend class SVGAnimateMotionElement;
		friend class SVGAnimateTransformElement;

	public:

		SVGTranslateTransform * getTranslate(bool create=false);
		SVGScaleTransform * getScale(bool create=false);
		SVGRotateTransform * getRotate(bool create=false);
		void getConsolidation(SVGMatrix *);

		void scale(double sx, double sy);
		void scale(double sx);
		void translate(double tx, double ty);
		void rotate(double angle);

		void dscale(double dsx, double dsy);
		void dscale(double dsx);
		void dtranslate(double dtx, double dty);
		void drotate(double dangle);

		virtual ~SVGTransformable() {}

		 void glTraverse(svgl::Context*, svgl::GLInfo*) const ;
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);
	};
}


#endif // __svg_SVGTransformable__
