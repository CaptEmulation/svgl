#ifndef __svg_SVGFilterElement__
#define __svg_SVGFilterElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGURIReference.hpp>
#include <w3c/svg/SVGLangSpace.hpp>
#include <w3c/svg/SVGExternalResourcesRequired.hpp>
#include <w3c/svg/SVGStylable.hpp>
#include <w3c/svg/SVGUnitTypes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/SVGAnimatedInteger.hpp>
#include <w3c/svg/String.hpp>
#include <svgl/MultiPassManager.hpp>

namespace svg {
            extern unicode::String * SVGFilterElement_element_string;
}

namespace svg {
	class SVGFilterElement :
		public SVGElement,
		public SVGURIReference,
		public SVGLangSpace,
		public SVGExternalResourcesRequired,
		public SVGStylable,
		public SVGUnitTypes {
	public:
	protected:
		Attribute< Animated<SVG_UNIT_TYPE> > filterUnits;
		Attribute< Animated<SVG_UNIT_TYPE> > primitiveUnits;
		Attribute< SVGAnimatedLength > x;
		Attribute< SVGAnimatedLength > y;
		Attribute< SVGAnimatedLength > width;
		Attribute< SVGAnimatedLength > height;
		Attribute< SVGAnimatedInteger > filterResX;
		Attribute< SVGAnimatedInteger > filterResY;
	public:
		const Attribute< Animated<SVG_UNIT_TYPE> >& dom_getFilterUnits() const { return filterUnits; }

		const Attribute< Animated<SVG_UNIT_TYPE> >& dom_getPrimitiveUnits() const { return primitiveUnits; }

		const Attribute< SVGAnimatedLength >& dom_getX() const { return x; }

		const Attribute< SVGAnimatedLength >& dom_getY() const { return y; }

		const Attribute< SVGAnimatedLength >& dom_getWidth() const { return width; }

		const Attribute< SVGAnimatedLength >& dom_getHeight() const { return height; }

		const Attribute< SVGAnimatedInteger >& dom_getFilterResX() const { return filterResX; }

		const Attribute< SVGAnimatedInteger >& dom_getFilterResY() const { return filterResY; }

	public:
		const SVG_UNIT_TYPE & getFilterUnits() const { return filterUnits.getValue().getAnimatedVal().getValue(); }
		void setFilterUnits(const SVG_UNIT_TYPE& n)  { filterUnits.getValue().getAnimatedVal().setValue(n); filterUnits.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_UNIT_TYPE & getPrimitiveUnits() const { return primitiveUnits.getValue().getAnimatedVal().getValue(); }
		void setPrimitiveUnits(const SVG_UNIT_TYPE& n)  { primitiveUnits.getValue().getAnimatedVal().setValue(n); primitiveUnits.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getX() const { return x.getValue().getAnimatedVal().getValue(); }
		void setX(const SVGLength& n)  { x.getValue().getAnimatedVal().setValue(n); x.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY() const { return y.getValue().getAnimatedVal().getValue(); }
		void setY(const SVGLength& n)  { y.getValue().getAnimatedVal().setValue(n); y.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getWidth() const { return width.getValue().getAnimatedVal().getValue(); }
		void setWidth(const SVGLength& n)  { width.getValue().getAnimatedVal().setValue(n); width.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getHeight() const { return height.getValue().getAnimatedVal().getValue(); }
		void setHeight(const SVGLength& n)  { height.getValue().getAnimatedVal().setValue(n); height.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGInteger & getFilterResX() const { return filterResX.getValue().getAnimatedVal().getValue(); }
		void setFilterResX(const SVGInteger& n)  { filterResX.getValue().getAnimatedVal().setValue(n); filterResX.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGInteger & getFilterResY() const { return filterResY.getValue().getAnimatedVal().getValue(); }
		void setFilterResY(const SVGInteger& n)  { filterResY.getValue().getAnimatedVal().setValue(n); filterResY.getValue().getBaseVal().setValue(n);  setDamaged(true); }


	protected:
		bool _nothingToDo;
		float _x,_y,_width,_height;
		svgl::MultiPassManager _multiPassManager;
	public:
		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem);
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem);

	public:
		virtual void setFilterRes ( unsigned long filterResX, unsigned long filterResY ) ;
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFilterElement();
		virtual const String getDtdElement() const { return SVGFilterElement_element_string; }
		SVGFilterElement(dom::Document* doc) : SVGElement(doc, SVGFilterElement_element_string) {}
	};
}


#endif // __svg_SVGFilterElement__
