#ifndef __svg_SVGPathSeg__
#define __svg_SVGPathSeg__

// generated by genFromIdl.py
	class BezierPath;

namespace svg {
}

namespace agg {
	class path_storage;
}

#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>
#include <utils/String.hpp>

namespace svg {
	class SVGPathSeg {
	public:

		enum PATHSEG {
			PATHSEG_UNKNOWN = 0,
			PATHSEG_CLOSEPATH = 1,
			PATHSEG_MOVETO_ABS = 2,
			PATHSEG_MOVETO_REL = 3,
			PATHSEG_LINETO_ABS = 4,
			PATHSEG_LINETO_REL = 5,
			PATHSEG_CURVETO_CUBIC_ABS = 6,
			PATHSEG_CURVETO_CUBIC_REL = 7,
			PATHSEG_CURVETO_QUADRATIC_ABS = 8,
			PATHSEG_CURVETO_QUADRATIC_REL = 9,
			PATHSEG_ARC_ABS = 10,
			PATHSEG_ARC_REL = 11,
			PATHSEG_LINETO_HORIZONTAL_ABS = 12,
			PATHSEG_LINETO_HORIZONTAL_REL = 13,
			PATHSEG_LINETO_VERTICAL_ABS = 14,
			PATHSEG_LINETO_VERTICAL_REL = 15,
			PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16,
			PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17,
			PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18,
			PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19
		};

	protected:
		Attribute< PATHSEG > pathSegType;
		Attribute< DOMString > pathSegTypeAsLetter;
	public:
		const Attribute< PATHSEG >& dom_getPathSegType() const { return pathSegType; }

		const Attribute< DOMString >& dom_getPathSegTypeAsLetter() const { return pathSegTypeAsLetter; }

	public:
		const PATHSEG & getPathSegType() const { return pathSegType.getValue(); }
		void setPathSegType(const PATHSEG& n)  { pathSegType.setValue(n); }

		const DOMString & getPathSegTypeAsLetter() const { return pathSegTypeAsLetter.getValue(); }
		void setPathSegTypeAsLetter(const DOMString& n)  { pathSegTypeAsLetter.setValue(n); }


	public:
		SVGPathSeg(PATHSEG t, unicode::String::char_type c) { pathSegType.setValue(t); pathSegTypeAsLetter.setValue(unicode::String::internStringUtf32(&c, 1)); }
virtual void updateBezier(BezierPath&) const=0;
virtual void updateBezier(agg::path_storage&) const=0;
	public:

	public:
		virtual ~SVGPathSeg();
	};
}


#endif // __svg_SVGPathSeg__
