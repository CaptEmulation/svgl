#ifndef __svg_SVGFECompositeElement__
#define __svg_SVGFECompositeElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class FilterContext;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGFilterPrimitiveStandardAttributes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFECompositeElement_element_string;
}

namespace svg {
	class SVGFECompositeElement :
		public SVGElement,
		public SVGFilterPrimitiveStandardAttributes {
	public:

		enum SVG_FECOMPOSITE_OPERATOR {
			SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0,
			SVG_FECOMPOSITE_OPERATOR_OVER = 1,
			SVG_FECOMPOSITE_OPERATOR_IN = 2,
			SVG_FECOMPOSITE_OPERATOR_OUT = 3,
			SVG_FECOMPOSITE_OPERATOR_ATOP = 4,
			SVG_FECOMPOSITE_OPERATOR_XOR = 5,
			SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6
		};

	protected:
		Attribute< SVGAnimatedString > in1;
		Attribute< SVGAnimatedString > in2;
		Attribute< Animated<SVG_FECOMPOSITE_OPERATOR> > operator_;
		Attribute< SVGAnimatedNumber > k1;
		Attribute< SVGAnimatedNumber > k2;
		Attribute< SVGAnimatedNumber > k3;
		Attribute< SVGAnimatedNumber > k4;
	public:
		const Attribute< SVGAnimatedString >& dom_getIn1() const { return in1; }

		const Attribute< SVGAnimatedString >& dom_getIn2() const { return in2; }

		const Attribute< Animated<SVG_FECOMPOSITE_OPERATOR> >& dom_getOperator() const { return operator_; }

		const Attribute< SVGAnimatedNumber >& dom_getK1() const { return k1; }

		const Attribute< SVGAnimatedNumber >& dom_getK2() const { return k2; }

		const Attribute< SVGAnimatedNumber >& dom_getK3() const { return k3; }

		const Attribute< SVGAnimatedNumber >& dom_getK4() const { return k4; }

	public:
		const SVGString & getIn1() const { return in1.getValue().getAnimatedVal().getValue(); }
		void setIn1(const SVGString& n)  { in1.getValue().getAnimatedVal().setValue(n); in1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGString & getIn2() const { return in2.getValue().getAnimatedVal().getValue(); }
		void setIn2(const SVGString& n)  { in2.getValue().getAnimatedVal().setValue(n); in2.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVG_FECOMPOSITE_OPERATOR & getOperator() const { return operator_.getValue().getAnimatedVal().getValue(); }
		void setOperator(const SVG_FECOMPOSITE_OPERATOR& n)  { operator_.getValue().getAnimatedVal().setValue(n); operator_.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getK1() const { return k1.getValue().getAnimatedVal().getValue(); }
		void setK1(const SVGNumber& n)  { k1.getValue().getAnimatedVal().setValue(n); k1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getK2() const { return k2.getValue().getAnimatedVal().getValue(); }
		void setK2(const SVGNumber& n)  { k2.getValue().getAnimatedVal().setValue(n); k2.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getK3() const { return k3.getValue().getAnimatedVal().getValue(); }
		void setK3(const SVGNumber& n)  { k3.getValue().getAnimatedVal().setValue(n); k3.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getK4() const { return k4.getValue().getAnimatedVal().getValue(); }
		void setK4(const SVGNumber& n)  { k4.getValue().getAnimatedVal().setValue(n); k4.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual unicode::String* getOptionalIn1();
		virtual unicode::String* getOptionalIn2();
		virtual unicode::String* getOptionalResult();

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFECompositeElement();
		virtual const String getDtdElement() const { return SVGFECompositeElement_element_string; }
		SVGFECompositeElement(dom::Document* doc) : SVGElement(doc, SVGFECompositeElement_element_string) {}
	};
}


#endif // __svg_SVGFECompositeElement__
