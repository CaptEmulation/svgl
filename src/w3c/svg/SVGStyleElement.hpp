#ifndef __svg_SVGStyleElement__
#define __svg_SVGStyleElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGStyleElement_element_string;
}

namespace svg {
	class SVGStyleElement :
		public SVGElement {
	public:
	protected:
		Attribute< DOMString > xmlspace;
		Attribute< DOMString > type;
		Attribute< DOMString > media;
		Attribute< DOMString > title;
	public:
		const Attribute< DOMString >& dom_getXmlspace() const { return xmlspace; }
		Attribute< DOMString >& dom_getXmlspace() { return xmlspace; }
		void dom_setXmlspace(const DOMString& n)  { xmlspace.setValue(n); }

		const Attribute< DOMString >& dom_getType() const { return type; }
		Attribute< DOMString >& dom_getType() { return type; }
		void dom_setType(const DOMString& n)  { type.setValue(n); }

		const Attribute< DOMString >& dom_getMedia() const { return media; }
		Attribute< DOMString >& dom_getMedia() { return media; }
		void dom_setMedia(const DOMString& n)  { media.setValue(n); }

		const Attribute< DOMString >& dom_getTitle() const { return title; }
		Attribute< DOMString >& dom_getTitle() { return title; }
		void dom_setTitle(const DOMString& n)  { title.setValue(n); }

	public:
		const DOMString & getXmlspace() const { return xmlspace.getValue(); }
		DOMString & getXmlspace() { return xmlspace.getValue(); }
		void setXmlspace(const DOMString& n)  { xmlspace.setValue(n);  setDamaged(true); }

		const DOMString & getType() const { return type.getValue(); }
		DOMString & getType() { return type.getValue(); }
		void setType(const DOMString& n)  { type.setValue(n);  setDamaged(true); }

		const DOMString & getMedia() const { return media.getValue(); }
		DOMString & getMedia() { return media.getValue(); }
		void setMedia(const DOMString& n)  { media.setValue(n);  setDamaged(true); }

		const DOMString & getTitle() const { return title.getValue(); }
		DOMString & getTitle() { return title.getValue(); }
		void setTitle(const DOMString& n)  { title.setValue(n);  setDamaged(true); }

	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGStyleElement();
		virtual const String getDtdElement() const { return SVGStyleElement_element_string; }
		SVGStyleElement(dom::Document* doc) : SVGElement(doc, SVGStyleElement_element_string) {}
	};
}


#endif // __svg_SVGStyleElement__
