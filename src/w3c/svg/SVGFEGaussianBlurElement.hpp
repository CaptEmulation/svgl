#ifndef __svg_SVGFEGaussianBlurElement__
#define __svg_SVGFEGaussianBlurElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGElement;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class FilterContext;
}

#include <w3c/svg/SVGElement.hpp>
#include <w3c/svg/SVGFilterPrimitiveStandardAttributes.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedString.hpp>
#include <w3c/svg/SVGAnimatedNumber.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGFEGaussianBlurElement_element_string;
}

namespace svg {
	class SVGFEGaussianBlurElement :
		public SVGElement,
		public SVGFilterPrimitiveStandardAttributes {
	public:
	protected:
		Attribute< SVGAnimatedString > in1;
		Attribute< SVGAnimatedNumber > stdDeviationX;
		Attribute< SVGAnimatedNumber > stdDeviationY;
	public:
		const Attribute< SVGAnimatedString >& dom_getIn1() const { return in1; }

		const Attribute< SVGAnimatedNumber >& dom_getStdDeviationX() const { return stdDeviationX; }

		const Attribute< SVGAnimatedNumber >& dom_getStdDeviationY() const { return stdDeviationY; }

	public:
		const SVGString & getIn1() const { return in1.getValue().getAnimatedVal().getValue(); }
		void setIn1(const SVGString& n)  { in1.getValue().getAnimatedVal().setValue(n); in1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getStdDeviationX() const { return stdDeviationX.getValue().getAnimatedVal().getValue(); }
		void setStdDeviationX(const SVGNumber& n)  { stdDeviationX.getValue().getAnimatedVal().setValue(n); stdDeviationX.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGNumber & getStdDeviationY() const { return stdDeviationY.getValue().getAnimatedVal().getValue(); }
		void setStdDeviationY(const SVGNumber& n)  { stdDeviationY.getValue().getAnimatedVal().setValue(n); stdDeviationY.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		virtual void glPreTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual void glPostTraverse(svgl::Context*, svgl::GLInfo*, SVGElement* elem, svgl::FilterContext*)  ;
		virtual unicode::String* getOptionalIn1();
		virtual unicode::String* getOptionalIn2();
		virtual unicode::String* getOptionalResult();


  int customParseAttributes(const String& attrName, const String& attrValue);
	public:
		virtual void setStdDeviation ( float stdDeviationX, float stdDeviationY ) ;
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGFEGaussianBlurElement();
		virtual const String getDtdElement() const { return SVGFEGaussianBlurElement_element_string; }
		SVGFEGaussianBlurElement(dom::Document* doc) : SVGElement(doc, SVGFEGaussianBlurElement_element_string) {}
	};
}


#endif // __svg_SVGFEGaussianBlurElement__
