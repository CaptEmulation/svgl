#ifndef __svg_SVGLinearGradientElement__
#define __svg_SVGLinearGradientElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
}

#include <w3c/svg/SVGGradientElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGLinearGradientElement_element_string;
}

namespace svg {
	class SVGLinearGradientElement :
		public SVGGradientElement {
	public:
	protected:
		Attribute< SVGAnimatedLength > x1;
		Attribute< SVGAnimatedLength > y1;
		Attribute< SVGAnimatedLength > x2;
		Attribute< SVGAnimatedLength > y2;
	public:
		const Attribute< SVGAnimatedLength >& dom_getX1() const { return x1; }

		const Attribute< SVGAnimatedLength >& dom_getY1() const { return y1; }

		const Attribute< SVGAnimatedLength >& dom_getX2() const { return x2; }

		const Attribute< SVGAnimatedLength >& dom_getY2() const { return y2; }

	public:
		const SVGLength & getX1() const { return x1.getValue().getAnimatedVal().getValue(); }
		void setX1(const SVGLength& n)  { x1.getValue().getAnimatedVal().setValue(n); x1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY1() const { return y1.getValue().getAnimatedVal().getValue(); }
		void setY1(const SVGLength& n)  { y1.getValue().getAnimatedVal().setValue(n); y1.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getX2() const { return x2.getValue().getAnimatedVal().getValue(); }
		void setX2(const SVGLength& n)  { x2.getValue().getAnimatedVal().setValue(n); x2.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY2() const { return y2.getValue().getAnimatedVal().getValue(); }
		void setY2(const SVGLength& n)  { y2.getValue().getAnimatedVal().setValue(n); y2.getValue().getBaseVal().setValue(n);  setDamaged(true); }


		SVGLinearGradientElement(dom::Document *);
		void glPreTraverse(svgl::Context*, svgl::GLInfo* glinfo);
		void glPostTraverse(svgl::Context*, svgl::GLInfo* glinfo, float x, float y, float width, float height);

		virtual void glTraverse(svgl::Context*, svgl::GLInfo*)  ;
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGLinearGradientElement();
		virtual const String getDtdElement() const { return SVGLinearGradientElement_element_string; }
	};
}


#endif // __svg_SVGLinearGradientElement__
