#ifndef __svg_SVGTextElement__
#define __svg_SVGTextElement__

// generated by genFromIdl.py
	class xmlostream;
	class BezierPath;

namespace svg {
}

namespace agg {
	class path_storage;
}

namespace svgl {
	class AnimateAdapter;
	class Context;
	class GLInfo;
	class TextInfo;
}

namespace dom {
	class Text;
}

#include <w3c/svg/SVGTextContentElement.hpp>
#include <w3c/svg/SVGTransformable.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGAnimatedLength.hpp>
#include <w3c/svg/String.hpp>

namespace svg {
            extern unicode::String * SVGTextElement_element_string;
}

namespace svg {
	class SVGTextElement :
		public SVGTextContentElement,
		public SVGTransformable {
	public:
	protected:
		Attribute< SVGAnimatedLength > x;
		Attribute< SVGAnimatedLength > y;
	public:
		const Attribute< SVGAnimatedLength >& dom_getX() const { return x; }

		const Attribute< SVGAnimatedLength >& dom_getY() const { return y; }

	public:
		const SVGLength & getX() const { return x.getValue().getAnimatedVal().getValue(); }
		void setX(const SVGLength& n)  { x.getValue().getAnimatedVal().setValue(n); x.getValue().getBaseVal().setValue(n);  setDamaged(true); }

		const SVGLength & getY() const { return y.getValue().getAnimatedVal().getValue(); }
		void setY(const SVGLength& n)  { y.getValue().getAnimatedVal().setValue(n); y.getValue().getBaseVal().setValue(n);  setDamaged(true); }


	protected:
		void glTraverseBoundingBoxPCDATA(svgl::Context*, svgl::GLInfo* glinfo, dom::Text* pcdata);
	public:
		void setText(const char*);
		//string getText();

		virtual long  getNumberOfChars();
		virtual float getComputedTextLength();
		virtual float getSubStringLength(unsigned long charnum, unsigned long nchars);

//		virtual SVGPoint *getStartPositionOfChar(unsigned long charnum);		
//		virtual SVGPoint *getEndPositionOfChar(unsigned long charnum);
//		virtual SVGRect  *getExtentOfChar(unsigned long charnum);
//		virtual float     getRotationOfChar(unsigned long charnum);
//		virtual long      getCharNumAtPosition(const SVGPoint& point);

		virtual void glTraverse(svgl::Context*, svgl::GLInfo*)  ;

		virtual void pickTraverse(svgl::Context*, svgl::GLInfo*)  ;

    public:
		virtual void glTextTraverse(svgl::Context*, svgl::GLInfo*, svgl::TextInfo*) ;
		virtual void glTextTraversePCDATA(svgl::Context*, svgl::GLInfo*, svgl::TextInfo*, dom::Text*) ;


	  virtual void getBoundingBox(svgl::Context* svglContext, svgl::GLInfo* glinfo, float*, float*, float*, float*) ;
	  //virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo) ;
	  //virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw) ;
          virtual void glTraverseBoundingBox(svgl::Context * svglContext, svgl::GLInfo* glinfo) ;
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, BezierPath*);
          virtual void asBezier(svgl::Context* svglContext, svgl::GLInfo* glinfo, agg::path_storage*);

	  virtual void glTraverseFill(svgl::Context* svglContext, svgl::GLInfo* glinfo);
	  virtual void glTraverseStroke(svgl::Context* svglContext, svgl::GLInfo* glinfo, float sw);
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGTextElement();
		virtual const String getDtdElement() const { return SVGTextElement_element_string; }
		SVGTextElement(dom::Document* doc) : SVGTextContentElement(doc, SVGTextElement_element_string) {}
	};
}


#endif // __svg_SVGTextElement__
