#ifndef __svg_SVGAnimateMotionElement__
#define __svg_SVGAnimateMotionElement__

// generated by genFromIdl.py
	class xmlostream;

namespace svg {
	class SVGTranslateTransform;
	class SVGRotateTransform;
}

namespace svgl {
	class AnimateAdapter;
	class BezierPathDistanceIterator;
	class AnimationInfo;
}

#include <w3c/svg/SVGAnimationElement.hpp>
#include <w3c/svg/Attribute.hpp>
#include <w3c/svg/SVGLengthList.hpp>
#include <w3c/svg/SVGPathSegList.hpp>
#include <w3c/svg/DOMString.hpp>
#include <w3c/svg/String.hpp>
#include <svgl/AnimationManager.hpp>
#include <svgl/KeyFrame.hpp>
#include <utility>
#include <vector>

namespace svg {
            extern unicode::String * SVGAnimateMotionElement_element_string;
}

namespace svg {
	class SVGAnimateMotionElement :
		public SVGAnimationElement {
	public:
	protected:
		Attribute< SVGLengthList > values;
		Attribute< SVGPathSegList > path;
		Attribute< DOMString > rotate;
	public:
		const Attribute< SVGLengthList >& dom_getValues() const { return values; }

		const Attribute< SVGPathSegList >& dom_getPath() const { return path; }

		const Attribute< DOMString >& dom_getRotate() const { return rotate; }

	public:
		const SVGLengthList & getValues() const { return values.getValue(); }
		void setValues(const SVGLengthList& n)  { values.setValue(n);  setDamaged(true); }

		const SVGPathSegList & getPath() const { return path.getValue(); }
		void setPath(const SVGPathSegList& n)  { path.setValue(n);  setDamaged(true); }

		const DOMString & getRotate() const { return rotate.getValue(); }
		void setRotate(const DOMString& n)  { rotate.setValue(n);  setDamaged(true); }


	protected:
	  typedef svgl::KeyFrame<std::pair<float,float> > KeyFrame;
	  typedef std::vector<KeyFrame> KeyFrames;
	  KeyFrames _keyFrames;
	  bool _doBezierAnim;
	  svgl::BezierPathDistanceIterator* _distanceIter;
	  float _bezierLength;
	  SVGTranslateTransform* _translateToAnimate;
          SVGRotateTransform* _rotateToAnimate;

          enum RotateType {
          rotate_no=0,
          rotate_auto,
          rotate_auto_reverse,
          rotate_angle
          };
          RotateType _doRotateAnim;

	public:
		virtual void animationTraverse(svgl::AnimationInfo*)  ;

	public:
		virtual void tick(svgl::Animation::TickInfo*);
		virtual void reset();
	public:
		virtual int parse_attributes(const String&, const String&);
		virtual void print_attributes(xmlostream&);
	public:
		virtual svgl::AnimateAdapter* getAttributeByName(const String&);

	public:
		virtual ~SVGAnimateMotionElement();
		virtual const String getDtdElement() const { return SVGAnimateMotionElement_element_string; }
		SVGAnimateMotionElement(dom::Document* doc) : SVGAnimationElement(doc, SVGAnimateMotionElement_element_string) {}
	};
}


#endif // __svg_SVGAnimateMotionElement__
